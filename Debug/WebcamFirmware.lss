
WebcamFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bc4  00400000  00400000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20000000  00402bc4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004c8  2000043c  00403000  0002043c  2**2
                  ALLOC
  3 .stack        00003004  20000904  004034c8  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY
  6 .debug_info   00018d0e  00000000  00000000  000204bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000037ef  00000000  00000000  000391cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000586a  00000000  00000000  0003c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b18  00000000  00000000  00042226  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a68  00000000  00000000  00042d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007ada  00000000  00000000  000437a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f916  00000000  00000000  0004b280  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00052119  00000000  00000000  0005ab96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001af8  00000000  00000000  000accb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 39 00 20 65 13 40 00 61 13 40 00 61 13 40 00     .9. e.@.a.@.a.@.
  400010:	61 13 40 00 61 13 40 00 61 13 40 00 00 00 00 00     a.@.a.@.a.@.....
	...
  40002c:	61 13 40 00 61 13 40 00 00 00 00 00 61 13 40 00     a.@.a.@.....a.@.
  40003c:	61 13 40 00 61 13 40 00 61 13 40 00 61 13 40 00     a.@.a.@.a.@.a.@.
  40004c:	61 13 40 00 61 13 40 00 61 13 40 00 61 13 40 00     a.@.a.@.a.@.a.@.
  40005c:	00 00 00 00 61 13 40 00 61 13 40 00 00 00 00 00     ....a.@.a.@.....
  40006c:	11 02 40 00 25 02 40 00 00 00 00 00 4d 0c 40 00     ..@.%.@.....M.@.
  40007c:	61 13 40 00 00 00 00 00 00 00 00 00 61 13 40 00     a.@.........a.@.
  40008c:	61 13 40 00 61 13 40 00 99 0e 40 00 61 13 40 00     a.@.a.@...@.a.@.
  40009c:	91 0b 40 00 61 13 40 00 61 13 40 00 00 00 00 00     ..@.a.@.a.@.....
	...
  4000b4:	61 13 40 00 61 13 40 00 61 13 40 00 61 13 40 00     a.@.a.@.a.@.a.@.
  4000c4:	61 13 40 00 61 13 40 00                             a.@.a.@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	2000043c 	.word	0x2000043c
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402bc4 	.word	0x00402bc4

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	00402bc4 	.word	0x00402bc4
  40012c:	20000440 	.word	0x20000440
  400130:	00402bc4 	.word	0x00402bc4
  400134:	00000000 	.word	0x00000000

00400138 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40013c:	4681      	mov	r9, r0
  40013e:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400140:	4b12      	ldr	r3, [pc, #72]	; (40018c <pio_handler_process+0x54>)
  400142:	4798      	blx	r3
  400144:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400146:	4648      	mov	r0, r9
  400148:	4b11      	ldr	r3, [pc, #68]	; (400190 <pio_handler_process+0x58>)
  40014a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40014c:	4005      	ands	r5, r0
  40014e:	d013      	beq.n	400178 <pio_handler_process+0x40>
  400150:	4c10      	ldr	r4, [pc, #64]	; (400194 <pio_handler_process+0x5c>)
  400152:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400156:	e003      	b.n	400160 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400158:	42b4      	cmp	r4, r6
  40015a:	d00d      	beq.n	400178 <pio_handler_process+0x40>
  40015c:	3410      	adds	r4, #16
		while (status != 0) {
  40015e:	b15d      	cbz	r5, 400178 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400160:	6820      	ldr	r0, [r4, #0]
  400162:	42b8      	cmp	r0, r7
  400164:	d1f8      	bne.n	400158 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400166:	6861      	ldr	r1, [r4, #4]
  400168:	4229      	tst	r1, r5
  40016a:	d0f5      	beq.n	400158 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40016c:	68e3      	ldr	r3, [r4, #12]
  40016e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400170:	6863      	ldr	r3, [r4, #4]
  400172:	ea25 0503 	bic.w	r5, r5, r3
  400176:	e7ef      	b.n	400158 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400178:	4b07      	ldr	r3, [pc, #28]	; (400198 <pio_handler_process+0x60>)
  40017a:	681b      	ldr	r3, [r3, #0]
  40017c:	b123      	cbz	r3, 400188 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40017e:	4b07      	ldr	r3, [pc, #28]	; (40019c <pio_handler_process+0x64>)
  400180:	681b      	ldr	r3, [r3, #0]
  400182:	b10b      	cbz	r3, 400188 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400184:	4648      	mov	r0, r9
  400186:	4798      	blx	r3
  400188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40018c:	004010af 	.word	0x004010af
  400190:	004010b3 	.word	0x004010b3
  400194:	20000458 	.word	0x20000458
  400198:	200008dc 	.word	0x200008dc
  40019c:	200004cc 	.word	0x200004cc

004001a0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4001a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4001a2:	4c18      	ldr	r4, [pc, #96]	; (400204 <pio_handler_set+0x64>)
  4001a4:	6826      	ldr	r6, [r4, #0]
  4001a6:	2e06      	cmp	r6, #6
  4001a8:	d829      	bhi.n	4001fe <pio_handler_set+0x5e>
  4001aa:	f04f 0c00 	mov.w	ip, #0
  4001ae:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4001b0:	4f15      	ldr	r7, [pc, #84]	; (400208 <pio_handler_set+0x68>)
  4001b2:	e004      	b.n	4001be <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4001b4:	3401      	adds	r4, #1
  4001b6:	b2e4      	uxtb	r4, r4
  4001b8:	46a4      	mov	ip, r4
  4001ba:	42a6      	cmp	r6, r4
  4001bc:	d309      	bcc.n	4001d2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4001be:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4001c0:	0125      	lsls	r5, r4, #4
  4001c2:	597d      	ldr	r5, [r7, r5]
  4001c4:	428d      	cmp	r5, r1
  4001c6:	d1f5      	bne.n	4001b4 <pio_handler_set+0x14>
  4001c8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4001cc:	686d      	ldr	r5, [r5, #4]
  4001ce:	4295      	cmp	r5, r2
  4001d0:	d1f0      	bne.n	4001b4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4001d2:	4d0d      	ldr	r5, [pc, #52]	; (400208 <pio_handler_set+0x68>)
  4001d4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4001d8:	eb05 040e 	add.w	r4, r5, lr
  4001dc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4001e0:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4001e2:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4001e4:	9906      	ldr	r1, [sp, #24]
  4001e6:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4001e8:	3601      	adds	r6, #1
  4001ea:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4001ec:	bf04      	itt	eq
  4001ee:	4905      	ldreq	r1, [pc, #20]	; (400204 <pio_handler_set+0x64>)
  4001f0:	600e      	streq	r6, [r1, #0]
  4001f2:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4001f4:	461a      	mov	r2, r3
  4001f6:	4b05      	ldr	r3, [pc, #20]	; (40020c <pio_handler_set+0x6c>)
  4001f8:	4798      	blx	r3

	return 0;
  4001fa:	2000      	movs	r0, #0
  4001fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
  4001fe:	2001      	movs	r0, #1
}
  400200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400202:	bf00      	nop
  400204:	200004c8 	.word	0x200004c8
  400208:	20000458 	.word	0x20000458
  40020c:	0040107d 	.word	0x0040107d

00400210 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400210:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400212:	210b      	movs	r1, #11
  400214:	4801      	ldr	r0, [pc, #4]	; (40021c <PIOA_Handler+0xc>)
  400216:	4b02      	ldr	r3, [pc, #8]	; (400220 <PIOA_Handler+0x10>)
  400218:	4798      	blx	r3
  40021a:	bd08      	pop	{r3, pc}
  40021c:	400e0e00 	.word	0x400e0e00
  400220:	00400139 	.word	0x00400139

00400224 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400224:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400226:	210c      	movs	r1, #12
  400228:	4801      	ldr	r0, [pc, #4]	; (400230 <PIOB_Handler+0xc>)
  40022a:	4b02      	ldr	r3, [pc, #8]	; (400234 <PIOB_Handler+0x10>)
  40022c:	4798      	blx	r3
  40022e:	bd08      	pop	{r3, pc}
  400230:	400e1000 	.word	0x400e1000
  400234:	00400139 	.word	0x00400139

00400238 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400238:	b508      	push	{r3, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40023a:	2015      	movs	r0, #21
  40023c:	4b01      	ldr	r3, [pc, #4]	; (400244 <spi_enable_clock+0xc>)
  40023e:	4798      	blx	r3
  400240:	bd08      	pop	{r3, pc}
  400242:	bf00      	nop
  400244:	004012c1 	.word	0x004012c1

00400248 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400248:	6843      	ldr	r3, [r0, #4]
  40024a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40024e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400250:	6843      	ldr	r3, [r0, #4]
  400252:	0409      	lsls	r1, r1, #16
  400254:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400258:	4319      	orrs	r1, r3
  40025a:	6041      	str	r1, [r0, #4]
  40025c:	4770      	bx	lr

0040025e <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
  40025e:	b410      	push	{r4}
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
  400260:	f643 2399 	movw	r3, #15001	; 0x3a99
  400264:	6904      	ldr	r4, [r0, #16]
  400266:	f014 0f01 	tst.w	r4, #1
  40026a:	d103      	bne.n	400274 <spi_read+0x16>
		if (!timeout--) {
  40026c:	3b01      	subs	r3, #1
  40026e:	d1f9      	bne.n	400264 <spi_read+0x6>
			return SPI_ERROR_TIMEOUT;
  400270:	2001      	movs	r0, #1
  400272:	e009      	b.n	400288 <spi_read+0x2a>
		}
	}

	reg_value = p_spi->SPI_RDR;
  400274:	6883      	ldr	r3, [r0, #8]
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400276:	6840      	ldr	r0, [r0, #4]
	if (spi_get_peripheral_select_mode(p_spi)) {
  400278:	f010 0f02 	tst.w	r0, #2
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
  40027c:	bf1c      	itt	ne
  40027e:	f3c3 4003 	ubfxne	r0, r3, #16, #4
  400282:	7010      	strbne	r0, [r2, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
  400284:	800b      	strh	r3, [r1, #0]

	return SPI_OK;
  400286:	2000      	movs	r0, #0
}
  400288:	bc10      	pop	{r4}
  40028a:	4770      	bx	lr

0040028c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40028c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40028e:	f643 2499 	movw	r4, #15001	; 0x3a99
  400292:	6905      	ldr	r5, [r0, #16]
  400294:	f015 0f02 	tst.w	r5, #2
  400298:	d103      	bne.n	4002a2 <spi_write+0x16>
		if (!timeout--) {
  40029a:	3c01      	subs	r4, #1
  40029c:	d1f9      	bne.n	400292 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40029e:	2001      	movs	r0, #1
  4002a0:	e00c      	b.n	4002bc <spi_write+0x30>
  4002a2:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4002a4:	f014 0f02 	tst.w	r4, #2
  4002a8:	d006      	beq.n	4002b8 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002aa:	0412      	lsls	r2, r2, #16
  4002ac:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4002b0:	4311      	orrs	r1, r2
		if (uc_last) {
  4002b2:	b10b      	cbz	r3, 4002b8 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4002b4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4002b8:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4002ba:	2000      	movs	r0, #0
}
  4002bc:	bc30      	pop	{r4, r5}
  4002be:	4770      	bx	lr

004002c0 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4002c0:	b932      	cbnz	r2, 4002d0 <spi_set_clock_polarity+0x10>
  4002c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4002c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002c8:	f023 0301 	bic.w	r3, r3, #1
  4002cc:	6303      	str	r3, [r0, #48]	; 0x30
  4002ce:	4770      	bx	lr
  4002d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002d6:	f043 0301 	orr.w	r3, r3, #1
  4002da:	6303      	str	r3, [r0, #48]	; 0x30
  4002dc:	4770      	bx	lr

004002de <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4002de:	b932      	cbnz	r2, 4002ee <spi_set_clock_phase+0x10>
  4002e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4002e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002e6:	f023 0302 	bic.w	r3, r3, #2
  4002ea:	6303      	str	r3, [r0, #48]	; 0x30
  4002ec:	4770      	bx	lr
  4002ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4002f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4002f4:	f043 0302 	orr.w	r3, r3, #2
  4002f8:	6303      	str	r3, [r0, #48]	; 0x30
  4002fa:	4770      	bx	lr

004002fc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4002fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400300:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  400306:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400308:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40030a:	431a      	orrs	r2, r3
  40030c:	630a      	str	r2, [r1, #48]	; 0x30
  40030e:	4770      	bx	lr

00400310 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400310:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400312:	0189      	lsls	r1, r1, #6
  400314:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400316:	2402      	movs	r4, #2
  400318:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40031a:	f04f 31ff 	mov.w	r1, #4294967295
  40031e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400320:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400322:	605a      	str	r2, [r3, #4]
}
  400324:	bc10      	pop	{r4}
  400326:	4770      	bx	lr

00400328 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400328:	0189      	lsls	r1, r1, #6
  40032a:	2305      	movs	r3, #5
  40032c:	5043      	str	r3, [r0, r1]
  40032e:	4770      	bx	lr

00400330 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400330:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400334:	61ca      	str	r2, [r1, #28]
  400336:	4770      	bx	lr

00400338 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400338:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  40033c:	624a      	str	r2, [r1, #36]	; 0x24
  40033e:	4770      	bx	lr

00400340 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400340:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  400344:	6a08      	ldr	r0, [r1, #32]
}
  400346:	4770      	bx	lr

00400348 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400348:	b4f0      	push	{r4, r5, r6, r7}
  40034a:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40034c:	2402      	movs	r4, #2
  40034e:	9401      	str	r4, [sp, #4]
  400350:	2408      	movs	r4, #8
  400352:	9402      	str	r4, [sp, #8]
  400354:	2420      	movs	r4, #32
  400356:	9403      	str	r4, [sp, #12]
  400358:	2480      	movs	r4, #128	; 0x80
  40035a:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  40035c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40035e:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400360:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400362:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400366:	d814      	bhi.n	400392 <tc_find_mck_divisor+0x4a>
  400368:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40036a:	42a0      	cmp	r0, r4
  40036c:	d217      	bcs.n	40039e <tc_find_mck_divisor+0x56>
  40036e:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400370:	af01      	add	r7, sp, #4
  400372:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400376:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40037a:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40037c:	4284      	cmp	r4, r0
  40037e:	d30a      	bcc.n	400396 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400380:	4286      	cmp	r6, r0
  400382:	d90d      	bls.n	4003a0 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400384:	3501      	adds	r5, #1
	for (ul_index = 0;
  400386:	2d05      	cmp	r5, #5
  400388:	d1f3      	bne.n	400372 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40038a:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40038c:	b006      	add	sp, #24
  40038e:	bcf0      	pop	{r4, r5, r6, r7}
  400390:	4770      	bx	lr
			return 0;
  400392:	2000      	movs	r0, #0
  400394:	e7fa      	b.n	40038c <tc_find_mck_divisor+0x44>
  400396:	2000      	movs	r0, #0
  400398:	e7f8      	b.n	40038c <tc_find_mck_divisor+0x44>
	return 1;
  40039a:	2001      	movs	r0, #1
  40039c:	e7f6      	b.n	40038c <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  40039e:	2500      	movs	r5, #0
	if (p_uldiv) {
  4003a0:	b12a      	cbz	r2, 4003ae <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  4003a2:	a906      	add	r1, sp, #24
  4003a4:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4003a8:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4003ac:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  4003ae:	2b00      	cmp	r3, #0
  4003b0:	d0f3      	beq.n	40039a <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  4003b2:	601d      	str	r5, [r3, #0]
	return 1;
  4003b4:	2001      	movs	r0, #1
  4003b6:	e7e9      	b.n	40038c <tc_find_mck_divisor+0x44>

004003b8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4003b8:	4b2a      	ldr	r3, [pc, #168]	; (400464 <twi_set_speed+0xac>)
  4003ba:	4299      	cmp	r1, r3
  4003bc:	d849      	bhi.n	400452 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4003be:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4003c2:	4299      	cmp	r1, r3
  4003c4:	d92b      	bls.n	40041e <twi_set_speed+0x66>
{
  4003c6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4003c8:	4c27      	ldr	r4, [pc, #156]	; (400468 <twi_set_speed+0xb0>)
  4003ca:	fba4 3402 	umull	r3, r4, r4, r2
  4003ce:	0ba4      	lsrs	r4, r4, #14
  4003d0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  4003d2:	4b26      	ldr	r3, [pc, #152]	; (40046c <twi_set_speed+0xb4>)
  4003d4:	440b      	add	r3, r1
  4003d6:	009b      	lsls	r3, r3, #2
  4003d8:	fbb2 f2f3 	udiv	r2, r2, r3
  4003dc:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003de:	2cff      	cmp	r4, #255	; 0xff
  4003e0:	d939      	bls.n	400456 <twi_set_speed+0x9e>
  4003e2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4003e4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
  4003e6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  4003e8:	2cff      	cmp	r4, #255	; 0xff
  4003ea:	d90d      	bls.n	400408 <twi_set_speed+0x50>
  4003ec:	2907      	cmp	r1, #7
  4003ee:	d1f9      	bne.n	4003e4 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003f0:	0213      	lsls	r3, r2, #8
  4003f2:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
  4003f4:	0409      	lsls	r1, r1, #16
  4003f6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
  4003fa:	430b      	orrs	r3, r1
  4003fc:	b2e4      	uxtb	r4, r4
  4003fe:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
  400400:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  400402:	2000      	movs	r0, #0
}
  400404:	bc10      	pop	{r4}
  400406:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400408:	2aff      	cmp	r2, #255	; 0xff
  40040a:	d9f1      	bls.n	4003f0 <twi_set_speed+0x38>
  40040c:	2906      	cmp	r1, #6
  40040e:	d8ef      	bhi.n	4003f0 <twi_set_speed+0x38>
			ckdiv++;
  400410:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
  400412:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400414:	2aff      	cmp	r2, #255	; 0xff
  400416:	d9eb      	bls.n	4003f0 <twi_set_speed+0x38>
  400418:	2906      	cmp	r1, #6
  40041a:	d9f9      	bls.n	400410 <twi_set_speed+0x58>
  40041c:	e7e8      	b.n	4003f0 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  40041e:	0049      	lsls	r1, r1, #1
  400420:	fbb2 f2f1 	udiv	r2, r2, r1
  400424:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400426:	2aff      	cmp	r2, #255	; 0xff
  400428:	d911      	bls.n	40044e <twi_set_speed+0x96>
  40042a:	2300      	movs	r3, #0
			ckdiv++;
  40042c:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
  40042e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400430:	2aff      	cmp	r2, #255	; 0xff
  400432:	d901      	bls.n	400438 <twi_set_speed+0x80>
  400434:	2b07      	cmp	r3, #7
  400436:	d1f9      	bne.n	40042c <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400438:	0211      	lsls	r1, r2, #8
  40043a:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
  40043c:	041b      	lsls	r3, r3, #16
  40043e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  400442:	430b      	orrs	r3, r1
  400444:	b2d2      	uxtb	r2, r2
  400446:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
  400448:	6102      	str	r2, [r0, #16]
	return PASS;
  40044a:	2000      	movs	r0, #0
  40044c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40044e:	2300      	movs	r3, #0
  400450:	e7f2      	b.n	400438 <twi_set_speed+0x80>
		return FAIL;
  400452:	2001      	movs	r0, #1
  400454:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  400456:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
  400458:	bf88      	it	hi
  40045a:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  40045c:	d8d8      	bhi.n	400410 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
  40045e:	2100      	movs	r1, #0
  400460:	e7c6      	b.n	4003f0 <twi_set_speed+0x38>
  400462:	bf00      	nop
  400464:	00061a80 	.word	0x00061a80
  400468:	057619f1 	.word	0x057619f1
  40046c:	3ffd1200 	.word	0x3ffd1200

00400470 <twi_master_init>:
{
  400470:	b538      	push	{r3, r4, r5, lr}
  400472:	4604      	mov	r4, r0
  400474:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
  400476:	f04f 33ff 	mov.w	r3, #4294967295
  40047a:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
  40047c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  40047e:	2380      	movs	r3, #128	; 0x80
  400480:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
  400482:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
  400484:	2308      	movs	r3, #8
  400486:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  400488:	2320      	movs	r3, #32
  40048a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
  40048c:	2304      	movs	r3, #4
  40048e:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  400490:	680a      	ldr	r2, [r1, #0]
  400492:	6849      	ldr	r1, [r1, #4]
  400494:	4b05      	ldr	r3, [pc, #20]	; (4004ac <twi_master_init+0x3c>)
  400496:	4798      	blx	r3
  400498:	2801      	cmp	r0, #1
  40049a:	bf14      	ite	ne
  40049c:	2000      	movne	r0, #0
  40049e:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
  4004a0:	7a6b      	ldrb	r3, [r5, #9]
  4004a2:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
  4004a4:	bf04      	itt	eq
  4004a6:	2340      	moveq	r3, #64	; 0x40
  4004a8:	6023      	streq	r3, [r4, #0]
}
  4004aa:	bd38      	pop	{r3, r4, r5, pc}
  4004ac:	004003b9 	.word	0x004003b9

004004b0 <twi_mk_addr>:
	if (len == 0)
  4004b0:	460a      	mov	r2, r1
  4004b2:	b159      	cbz	r1, 4004cc <twi_mk_addr+0x1c>
	val = addr[0];
  4004b4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
  4004b6:	2901      	cmp	r1, #1
		val |= addr[1];
  4004b8:	bfc4      	itt	gt
  4004ba:	7841      	ldrbgt	r1, [r0, #1]
  4004bc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
  4004c0:	2a02      	cmp	r2, #2
  4004c2:	dd04      	ble.n	4004ce <twi_mk_addr+0x1e>
		val |= addr[2];
  4004c4:	7882      	ldrb	r2, [r0, #2]
  4004c6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  4004ca:	e000      	b.n	4004ce <twi_mk_addr+0x1e>
		return 0;
  4004cc:	2300      	movs	r3, #0
}
  4004ce:	4618      	mov	r0, r3
  4004d0:	4770      	bx	lr
	...

004004d4 <twi_master_read>:
{
  4004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
  4004d6:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
  4004d8:	2c00      	cmp	r4, #0
  4004da:	d04f      	beq.n	40057c <twi_master_read+0xa8>
  4004dc:	460b      	mov	r3, r1
  4004de:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
  4004e0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  4004e2:	2000      	movs	r0, #0
  4004e4:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4004e6:	684a      	ldr	r2, [r1, #4]
  4004e8:	0212      	lsls	r2, r2, #8
  4004ea:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  4004ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  4004f2:	7c09      	ldrb	r1, [r1, #16]
  4004f4:	0409      	lsls	r1, r1, #16
  4004f6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
  4004fa:	430a      	orrs	r2, r1
  4004fc:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
  4004fe:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  400500:	6859      	ldr	r1, [r3, #4]
  400502:	4618      	mov	r0, r3
  400504:	4b22      	ldr	r3, [pc, #136]	; (400590 <twi_master_read+0xbc>)
  400506:	4798      	blx	r3
  400508:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
  40050a:	2c01      	cmp	r4, #1
  40050c:	d00f      	beq.n	40052e <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
  40050e:	2301      	movs	r3, #1
  400510:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
  400512:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
  400514:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400516:	f413 7f80 	tst.w	r3, #256	; 0x100
  40051a:	d136      	bne.n	40058a <twi_master_read+0xb6>
  40051c:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
  400520:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
  400524:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
  400528:	f04f 0c02 	mov.w	ip, #2
  40052c:	e019      	b.n	400562 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  40052e:	2303      	movs	r3, #3
  400530:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
  400532:	2001      	movs	r0, #1
  400534:	e7ee      	b.n	400514 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
  400536:	460a      	mov	r2, r1
  400538:	4670      	mov	r0, lr
  40053a:	e00c      	b.n	400556 <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
  40053c:	b908      	cbnz	r0, 400542 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
  40053e:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
  400542:	f013 0f02 	tst.w	r3, #2
  400546:	d0f6      	beq.n	400536 <twi_master_read+0x62>
  400548:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
  40054a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  40054c:	7033      	strb	r3, [r6, #0]
		cnt--;
  40054e:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
  400550:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
  400552:	463a      	mov	r2, r7
	while (cnt > 0) {
  400554:	b164      	cbz	r4, 400570 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
  400556:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
  400558:	f413 7f80 	tst.w	r3, #256	; 0x100
  40055c:	d111      	bne.n	400582 <twi_master_read+0xae>
		if (!timeout--) {
  40055e:	1e51      	subs	r1, r2, #1
  400560:	b18a      	cbz	r2, 400586 <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
  400562:	2c01      	cmp	r4, #1
  400564:	d0ea      	beq.n	40053c <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
  400566:	f013 0f02 	tst.w	r3, #2
  40056a:	d1ee      	bne.n	40054a <twi_master_read+0x76>
  40056c:	460a      	mov	r2, r1
  40056e:	e7f1      	b.n	400554 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  400570:	6a2b      	ldr	r3, [r5, #32]
  400572:	f013 0f01 	tst.w	r3, #1
  400576:	d0fb      	beq.n	400570 <twi_master_read+0x9c>
	p_twi->TWI_SR;
  400578:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
  40057a:	e000      	b.n	40057e <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
  40057c:	2401      	movs	r4, #1
}
  40057e:	4620      	mov	r0, r4
  400580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
  400582:	2405      	movs	r4, #5
  400584:	e7fb      	b.n	40057e <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
  400586:	2409      	movs	r4, #9
  400588:	e7f9      	b.n	40057e <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
  40058a:	2405      	movs	r4, #5
  40058c:	e7f7      	b.n	40057e <twi_master_read+0xaa>
  40058e:	bf00      	nop
  400590:	004004b1 	.word	0x004004b1

00400594 <twi_master_write>:
{
  400594:	b570      	push	{r4, r5, r6, lr}
	uint32_t cnt = p_packet->length;
  400596:	68cd      	ldr	r5, [r1, #12]
	if (cnt == 0) {
  400598:	2d00      	cmp	r5, #0
  40059a:	d035      	beq.n	400608 <twi_master_write+0x74>
  40059c:	460b      	mov	r3, r1
  40059e:	4604      	mov	r4, r0
	uint8_t *buffer = p_packet->buffer;
  4005a0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
  4005a2:	2000      	movs	r0, #0
  4005a4:	6060      	str	r0, [r4, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4005a6:	7c0a      	ldrb	r2, [r1, #16]
  4005a8:	0412      	lsls	r2, r2, #16
  4005aa:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  4005ae:	6849      	ldr	r1, [r1, #4]
  4005b0:	0209      	lsls	r1, r1, #8
  4005b2:	f401 7140 	and.w	r1, r1, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  4005b6:	430a      	orrs	r2, r1
  4005b8:	6062      	str	r2, [r4, #4]
	p_twi->TWI_IADR = 0;
  4005ba:	60e0      	str	r0, [r4, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  4005bc:	6859      	ldr	r1, [r3, #4]
  4005be:	4618      	mov	r0, r3
  4005c0:	4b15      	ldr	r3, [pc, #84]	; (400618 <twi_master_write+0x84>)
  4005c2:	4798      	blx	r3
  4005c4:	60e0      	str	r0, [r4, #12]
		status = p_twi->TWI_SR;
  4005c6:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4005c8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005cc:	d006      	beq.n	4005dc <twi_master_write+0x48>
			return TWI_RECEIVE_NACK;
  4005ce:	2505      	movs	r5, #5
  4005d0:	e01b      	b.n	40060a <twi_master_write+0x76>
	while (cnt > 0) {
  4005d2:	b15d      	cbz	r5, 4005ec <twi_master_write+0x58>
		status = p_twi->TWI_SR;
  4005d4:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4005d6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005da:	d118      	bne.n	40060e <twi_master_write+0x7a>
		if (!(status & TWI_SR_TXRDY)) {
  4005dc:	f013 0f04 	tst.w	r3, #4
  4005e0:	d0f7      	beq.n	4005d2 <twi_master_write+0x3e>
		p_twi->TWI_THR = *buffer++;
  4005e2:	7833      	ldrb	r3, [r6, #0]
  4005e4:	6363      	str	r3, [r4, #52]	; 0x34
		cnt--;
  4005e6:	3d01      	subs	r5, #1
		p_twi->TWI_THR = *buffer++;
  4005e8:	3601      	adds	r6, #1
  4005ea:	e7f2      	b.n	4005d2 <twi_master_write+0x3e>
		status = p_twi->TWI_SR;
  4005ec:	6a23      	ldr	r3, [r4, #32]
		if (status & TWI_SR_NACK) {
  4005ee:	f413 7f80 	tst.w	r3, #256	; 0x100
  4005f2:	d10e      	bne.n	400612 <twi_master_write+0x7e>
		if (status & TWI_SR_TXRDY) {
  4005f4:	f013 0f04 	tst.w	r3, #4
  4005f8:	d0f8      	beq.n	4005ec <twi_master_write+0x58>
	p_twi->TWI_CR = TWI_CR_STOP;
  4005fa:	2302      	movs	r3, #2
  4005fc:	6023      	str	r3, [r4, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  4005fe:	6a23      	ldr	r3, [r4, #32]
  400600:	f013 0f01 	tst.w	r3, #1
  400604:	d0fb      	beq.n	4005fe <twi_master_write+0x6a>
  400606:	e000      	b.n	40060a <twi_master_write+0x76>
		return TWI_INVALID_ARGUMENT;
  400608:	2501      	movs	r5, #1
}
  40060a:	4628      	mov	r0, r5
  40060c:	bd70      	pop	{r4, r5, r6, pc}
			return TWI_RECEIVE_NACK;
  40060e:	2505      	movs	r5, #5
  400610:	e7fb      	b.n	40060a <twi_master_write+0x76>
			return TWI_RECEIVE_NACK;
  400612:	2505      	movs	r5, #5
  400614:	e7f9      	b.n	40060a <twi_master_write+0x76>
  400616:	bf00      	nop
  400618:	004004b1 	.word	0x004004b1

0040061c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  40061c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  40061e:	010b      	lsls	r3, r1, #4
  400620:	4293      	cmp	r3, r2
  400622:	d914      	bls.n	40064e <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400624:	00c9      	lsls	r1, r1, #3
  400626:	084b      	lsrs	r3, r1, #1
  400628:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  40062c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400630:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400632:	1e5c      	subs	r4, r3, #1
  400634:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400638:	428c      	cmp	r4, r1
  40063a:	d901      	bls.n	400640 <usart_set_async_baudrate+0x24>
		return 1;
  40063c:	2001      	movs	r0, #1
  40063e:	e017      	b.n	400670 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400640:	6841      	ldr	r1, [r0, #4]
  400642:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400646:	6041      	str	r1, [r0, #4]
  400648:	e00c      	b.n	400664 <usart_set_async_baudrate+0x48>
		return 1;
  40064a:	2001      	movs	r0, #1
  40064c:	e010      	b.n	400670 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  40064e:	0859      	lsrs	r1, r3, #1
  400650:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400654:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400658:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  40065a:	1e5c      	subs	r4, r3, #1
  40065c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400660:	428c      	cmp	r4, r1
  400662:	d8f2      	bhi.n	40064a <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400664:	0412      	lsls	r2, r2, #16
  400666:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  40066a:	431a      	orrs	r2, r3
  40066c:	6202      	str	r2, [r0, #32]

	return 0;
  40066e:	2000      	movs	r0, #0
}
  400670:	bc10      	pop	{r4}
  400672:	4770      	bx	lr

00400674 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400674:	4b0a      	ldr	r3, [pc, #40]	; (4006a0 <usart_reset+0x2c>)
  400676:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  40067a:	2300      	movs	r3, #0
  40067c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  40067e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400680:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400682:	2388      	movs	r3, #136	; 0x88
  400684:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400686:	2324      	movs	r3, #36	; 0x24
  400688:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  40068a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40068e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400690:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400694:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_DTRDIS;
  400696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  40069a:	6003      	str	r3, [r0, #0]
  40069c:	4770      	bx	lr
  40069e:	bf00      	nop
  4006a0:	55534100 	.word	0x55534100

004006a4 <usart_init_rs232>:
{
  4006a4:	b570      	push	{r4, r5, r6, lr}
  4006a6:	4605      	mov	r5, r0
  4006a8:	460c      	mov	r4, r1
  4006aa:	4616      	mov	r6, r2
	usart_reset(p_usart);
  4006ac:	4b0f      	ldr	r3, [pc, #60]	; (4006ec <usart_init_rs232+0x48>)
  4006ae:	4798      	blx	r3
	ul_reg_val = 0;
  4006b0:	2200      	movs	r2, #0
  4006b2:	4b0f      	ldr	r3, [pc, #60]	; (4006f0 <usart_init_rs232+0x4c>)
  4006b4:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  4006b6:	b1a4      	cbz	r4, 4006e2 <usart_init_rs232+0x3e>
  4006b8:	4632      	mov	r2, r6
  4006ba:	6821      	ldr	r1, [r4, #0]
  4006bc:	4628      	mov	r0, r5
  4006be:	4b0d      	ldr	r3, [pc, #52]	; (4006f4 <usart_init_rs232+0x50>)
  4006c0:	4798      	blx	r3
  4006c2:	4602      	mov	r2, r0
  4006c4:	b978      	cbnz	r0, 4006e6 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4006c6:	6863      	ldr	r3, [r4, #4]
  4006c8:	68a1      	ldr	r1, [r4, #8]
  4006ca:	430b      	orrs	r3, r1
  4006cc:	6921      	ldr	r1, [r4, #16]
  4006ce:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  4006d0:	68e1      	ldr	r1, [r4, #12]
  4006d2:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  4006d4:	4906      	ldr	r1, [pc, #24]	; (4006f0 <usart_init_rs232+0x4c>)
  4006d6:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  4006d8:	6869      	ldr	r1, [r5, #4]
  4006da:	430b      	orrs	r3, r1
  4006dc:	606b      	str	r3, [r5, #4]
}
  4006de:	4610      	mov	r0, r2
  4006e0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  4006e2:	2201      	movs	r2, #1
  4006e4:	e7fb      	b.n	4006de <usart_init_rs232+0x3a>
  4006e6:	2201      	movs	r2, #1
  4006e8:	e7f9      	b.n	4006de <usart_init_rs232+0x3a>
  4006ea:	bf00      	nop
  4006ec:	00400675 	.word	0x00400675
  4006f0:	200004d0 	.word	0x200004d0
  4006f4:	0040061d 	.word	0x0040061d

004006f8 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  4006f8:	2340      	movs	r3, #64	; 0x40
  4006fa:	6003      	str	r3, [r0, #0]
  4006fc:	4770      	bx	lr

004006fe <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  4006fe:	2310      	movs	r3, #16
  400700:	6003      	str	r3, [r0, #0]
  400702:	4770      	bx	lr

00400704 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  400704:	6081      	str	r1, [r0, #8]
  400706:	4770      	bx	lr

00400708 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
  400708:	60c1      	str	r1, [r0, #12]
  40070a:	4770      	bx	lr

0040070c <usart_get_status>:
	return p_usart->US_CSR;
  40070c:	6940      	ldr	r0, [r0, #20]
}
  40070e:	4770      	bx	lr

00400710 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400710:	6943      	ldr	r3, [r0, #20]
  400712:	f013 0f02 	tst.w	r3, #2
  400716:	d0fb      	beq.n	400710 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
  400718:	f3c1 0108 	ubfx	r1, r1, #0, #9
  40071c:	61c1      	str	r1, [r0, #28]
}
  40071e:	2000      	movs	r0, #0
  400720:	4770      	bx	lr
	...

00400724 <usart_write_line>:
{
  400724:	b570      	push	{r4, r5, r6, lr}
  400726:	460c      	mov	r4, r1
	while (*string != '\0') {
  400728:	7809      	ldrb	r1, [r1, #0]
  40072a:	b139      	cbz	r1, 40073c <usart_write_line+0x18>
  40072c:	4605      	mov	r5, r0
		usart_putchar(p_usart, *string++);
  40072e:	4e04      	ldr	r6, [pc, #16]	; (400740 <usart_write_line+0x1c>)
  400730:	4628      	mov	r0, r5
  400732:	47b0      	blx	r6
	while (*string != '\0') {
  400734:	f814 1f01 	ldrb.w	r1, [r4, #1]!
  400738:	2900      	cmp	r1, #0
  40073a:	d1f9      	bne.n	400730 <usart_write_line+0xc>
  40073c:	bd70      	pop	{r4, r5, r6, pc}
  40073e:	bf00      	nop
  400740:	00400711 	.word	0x00400711

00400744 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400744:	6943      	ldr	r3, [r0, #20]
  400746:	f013 0f01 	tst.w	r3, #1
  40074a:	d005      	beq.n	400758 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  40074c:	6983      	ldr	r3, [r0, #24]
  40074e:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400752:	600b      	str	r3, [r1, #0]
	return 0;
  400754:	2000      	movs	r0, #0
  400756:	4770      	bx	lr
		return 1;
  400758:	2001      	movs	r0, #1
}
  40075a:	4770      	bx	lr

0040075c <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40075c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400760:	6043      	str	r3, [r0, #4]
  400762:	4770      	bx	lr

00400764 <vsync_handler>:
void vsync_handler(uint32_t ul_id, uint32_t ul_mask)
{
	unused(ul_id);
	unused(ul_mask);

	g_ul_vsync_flag = true;
  400764:	2201      	movs	r2, #1
  400766:	4b01      	ldr	r3, [pc, #4]	; (40076c <vsync_handler+0x8>)
  400768:	601a      	str	r2, [r3, #0]
  40076a:	4770      	bx	lr
  40076c:	200004d4 	.word	0x200004d4

00400770 <init_vsync_interrupts>:
}

/* Initialize Vsync_Handler*/
void init_vsync_interrupts(void)
{
  400770:	b510      	push	{r4, lr}
  400772:	b082      	sub	sp, #8
	/* Initialize PIO interrupt handler, see PIO definition in conf_board.h
	**/
	pio_handler_set(OV_VSYNC_PIO, OV_VSYNC_ID, OV_VSYNC_MASK,
  400774:	4b07      	ldr	r3, [pc, #28]	; (400794 <init_vsync_interrupts+0x24>)
  400776:	9300      	str	r3, [sp, #0]
  400778:	2301      	movs	r3, #1
  40077a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40077e:	210b      	movs	r1, #11
  400780:	4805      	ldr	r0, [pc, #20]	; (400798 <init_vsync_interrupts+0x28>)
  400782:	4c06      	ldr	r4, [pc, #24]	; (40079c <init_vsync_interrupts+0x2c>)
  400784:	47a0      	blx	r4
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400786:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40078a:	4b05      	ldr	r3, [pc, #20]	; (4007a0 <init_vsync_interrupts+0x30>)
  40078c:	601a      	str	r2, [r3, #0]
			OV_VSYNC_TYPE, vsync_handler);

	/* Enable PIO controller IRQs */
	NVIC_EnableIRQ((IRQn_Type)OV_VSYNC_ID);
}
  40078e:	b002      	add	sp, #8
  400790:	bd10      	pop	{r4, pc}
  400792:	bf00      	nop
  400794:	00400765 	.word	0x00400765
  400798:	400e0e00 	.word	0x400e0e00
  40079c:	004001a1 	.word	0x004001a1
  4007a0:	e000e100 	.word	0xe000e100

004007a4 <configure_twi>:

void configure_twi(void)
{
  4007a4:	b530      	push	{r4, r5, lr}
  4007a6:	b085      	sub	sp, #20
	twi_options_t opt;
	/* Enable TWI peripheral */
	pmc_enable_periph_clk(ID_BOARD_TWI);
  4007a8:	2013      	movs	r0, #19
  4007aa:	4b10      	ldr	r3, [pc, #64]	; (4007ec <configure_twi+0x48>)
  4007ac:	4798      	blx	r3

	/* Init TWI peripheral */
	opt.master_clk = sysclk_get_cpu_hz();
  4007ae:	4b10      	ldr	r3, [pc, #64]	; (4007f0 <configure_twi+0x4c>)
  4007b0:	9301      	str	r3, [sp, #4]
	opt.speed      = TWI_CLK;
  4007b2:	4b10      	ldr	r3, [pc, #64]	; (4007f4 <configure_twi+0x50>)
  4007b4:	9302      	str	r3, [sp, #8]
	twi_master_init(BOARD_TWI, &opt);
  4007b6:	a901      	add	r1, sp, #4
  4007b8:	480f      	ldr	r0, [pc, #60]	; (4007f8 <configure_twi+0x54>)
  4007ba:	4b10      	ldr	r3, [pc, #64]	; (4007fc <configure_twi+0x58>)
  4007bc:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007be:	4b10      	ldr	r3, [pc, #64]	; (400800 <configure_twi+0x5c>)
  4007c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4007c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4007cc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  4007d4:	2100      	movs	r1, #0
  4007d6:	f883 1313 	strb.w	r1, [r3, #787]	; 0x313
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4007da:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
	
	/* ov2640 Initialization */
	while (ov_init(BOARD_TWI) == 1) {
  4007dc:	4d06      	ldr	r5, [pc, #24]	; (4007f8 <configure_twi+0x54>)
  4007de:	4c09      	ldr	r4, [pc, #36]	; (400804 <configure_twi+0x60>)
  4007e0:	4628      	mov	r0, r5
  4007e2:	47a0      	blx	r4
  4007e4:	2801      	cmp	r0, #1
  4007e6:	d0fb      	beq.n	4007e0 <configure_twi+0x3c>
	}
	
}
  4007e8:	b005      	add	sp, #20
  4007ea:	bd30      	pop	{r4, r5, pc}
  4007ec:	004012c1 	.word	0x004012c1
  4007f0:	07270e00 	.word	0x07270e00
  4007f4:	00061a80 	.word	0x00061a80
  4007f8:	40018000 	.word	0x40018000
  4007fc:	00400471 	.word	0x00400471
  400800:	e000e100 	.word	0xe000e100
  400804:	00400999 	.word	0x00400999

00400808 <pio_capture_init>:
 *
 * \param p_pio PIO instance to be configured in PIO capture mode.
 * \param ul_id Corresponding PIO ID.
 */
void pio_capture_init(Pio *p_pio, uint32_t ul_id)
{
  400808:	b510      	push	{r4, lr}
  40080a:	4604      	mov	r4, r0
	/* Enable periphral clock */
	pmc_enable_periph_clk(ul_id);
  40080c:	4608      	mov	r0, r1
  40080e:	4b19      	ldr	r3, [pc, #100]	; (400874 <pio_capture_init+0x6c>)
  400810:	4798      	blx	r3

	/* Disable pio capture */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_PCEN);
  400812:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  400816:	f023 0301 	bic.w	r3, r3, #1
  40081a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Disable rxbuff interrupt */
	p_pio->PIO_PCIDR |= PIO_PCIDR_RXBUFF;
  40081e:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
  400822:	f043 0308 	orr.w	r3, r3, #8
  400826:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158

	/* 32bit width*/
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_DSIZE_Msk);
  40082a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40082e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
  400832:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR |= PIO_PCMR_DSIZE_WORD;
  400836:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40083a:	f043 0320 	orr.w	r3, r3, #32
  40083e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

	/* Only HSYNC and VSYNC enabled */
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_ALWYS);
  400842:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  400846:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  40084a:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_HALFS);
  40084e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  400852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  400856:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150

#if !defined(DEFAULT_MODE_COLORED)
	/* Samples only data with even index */
	p_pio->PIO_PCMR |= PIO_PCMR_HALFS;
  40085a:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40085e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  400862:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
	p_pio->PIO_PCMR &= ~((uint32_t)PIO_PCMR_FRSTS);
  400866:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
  40086a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40086e:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
  400872:	bd10      	pop	{r4, pc}
  400874:	004012c1 	.word	0x004012c1

00400878 <init_camera>:
		return 0;
	}
}

void init_camera(void)
{
  400878:	b510      	push	{r4, lr}
	/* Init Vsync handler*/
	init_vsync_interrupts();
  40087a:	4b0d      	ldr	r3, [pc, #52]	; (4008b0 <init_camera+0x38>)
  40087c:	4798      	blx	r3

	/* Init PIO capture*/
	pio_capture_init(OV_DATA_BUS_PIO, OV_DATA_BUS_ID);
  40087e:	4c0d      	ldr	r4, [pc, #52]	; (4008b4 <init_camera+0x3c>)
  400880:	210b      	movs	r1, #11
  400882:	4620      	mov	r0, r4
  400884:	4b0c      	ldr	r3, [pc, #48]	; (4008b8 <init_camera+0x40>)
  400886:	4798      	blx	r3

	/* Turn on ov7740 image sensor using power pin */
	uint32_t t = 1;
	ov_power(t, OV_RST_PIO, OV_RST_MASK); // Camera resets when it is pulled low
  400888:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  40088c:	4621      	mov	r1, r4
  40088e:	2001      	movs	r0, #1
  400890:	4b0a      	ldr	r3, [pc, #40]	; (4008bc <init_camera+0x44>)
  400892:	4798      	blx	r3
	
	/* Init PCK0 to work at 24 Mhz */
	/* 96/4=24 Mhz */
	PMC->PMC_PCK[0] = (PMC_PCK_PRES_CLK_4 | PMC_PCK_CSS_PLLA_CLK);
  400894:	4b0a      	ldr	r3, [pc, #40]	; (4008c0 <init_camera+0x48>)
  400896:	2222      	movs	r2, #34	; 0x22
  400898:	641a      	str	r2, [r3, #64]	; 0x40
	PMC->PMC_SCER = PMC_SCER_PCK0;
  40089a:	f44f 7280 	mov.w	r2, #256	; 0x100
  40089e:	601a      	str	r2, [r3, #0]
	while (!(PMC->PMC_SCSR & PMC_SCSR_PCK0)) {
  4008a0:	461a      	mov	r2, r3
  4008a2:	6893      	ldr	r3, [r2, #8]
  4008a4:	f413 7f80 	tst.w	r3, #256	; 0x100
  4008a8:	d0fb      	beq.n	4008a2 <init_camera+0x2a>
	}
	
	configure_twi();
  4008aa:	4b06      	ldr	r3, [pc, #24]	; (4008c4 <init_camera+0x4c>)
  4008ac:	4798      	blx	r3
  4008ae:	bd10      	pop	{r4, pc}
  4008b0:	00400771 	.word	0x00400771
  4008b4:	400e0e00 	.word	0x400e0e00
  4008b8:	00400809 	.word	0x00400809
  4008bc:	00400901 	.word	0x00400901
  4008c0:	400e0400 	.word	0x400e0400
  4008c4:	004007a5 	.word	0x004007a5

004008c8 <configure_camera>:
	
}

void configure_camera(void)
{
  4008c8:	b538      	push	{r3, r4, r5, lr}
	/* ov2640 configuration */
	ov_configure(BOARD_TWI, JPEG_INIT);
  4008ca:	4d09      	ldr	r5, [pc, #36]	; (4008f0 <configure_camera+0x28>)
  4008cc:	2100      	movs	r1, #0
  4008ce:	4628      	mov	r0, r5
  4008d0:	4c08      	ldr	r4, [pc, #32]	; (4008f4 <configure_camera+0x2c>)
  4008d2:	47a0      	blx	r4
	ov_configure(BOARD_TWI, YUV422);
  4008d4:	2101      	movs	r1, #1
  4008d6:	4628      	mov	r0, r5
  4008d8:	47a0      	blx	r4
	ov_configure(BOARD_TWI, JPEG);
  4008da:	2102      	movs	r1, #2
  4008dc:	4628      	mov	r0, r5
  4008de:	47a0      	blx	r4
	ov_configure(BOARD_TWI, JPEG_320x240);
  4008e0:	2103      	movs	r1, #3
  4008e2:	4628      	mov	r0, r5
  4008e4:	47a0      	blx	r4
	
	/* Wait 3 seconds to let the image sensor to adapt to environment */
	delay_ms(3000);
  4008e6:	4804      	ldr	r0, [pc, #16]	; (4008f8 <configure_camera+0x30>)
  4008e8:	4b04      	ldr	r3, [pc, #16]	; (4008fc <configure_camera+0x34>)
  4008ea:	4798      	blx	r3
  4008ec:	bd38      	pop	{r3, r4, r5, pc}
  4008ee:	bf00      	nop
  4008f0:	40018000 	.word	0x40018000
  4008f4:	00400ad5 	.word	0x00400ad5
  4008f8:	01885e6e 	.word	0x01885e6e
  4008fc:	20000001 	.word	0x20000001

00400900 <ov_power>:
 * \param on_off 1 to turn on OV2640 sensor and 0 to turn off.
 * \param p_pio Pointer to the PIO instance which control OV2640 sensor power.
 * \param ul_mask Bitmask of OV2640 sensor power pin.
 */
void ov_power(uint32_t ul_on_off, Pio* const p_pio, const uint32_t ul_mask)
{
  400900:	b508      	push	{r3, lr}
  400902:	460b      	mov	r3, r1
	if (ul_on_off) {
  400904:	b920      	cbnz	r0, 400910 <ov_power+0x10>
		pio_clear(p_pio, ul_mask);
	} else {
		pio_set(p_pio, ul_mask);
  400906:	4611      	mov	r1, r2
  400908:	4618      	mov	r0, r3
  40090a:	4b04      	ldr	r3, [pc, #16]	; (40091c <ov_power+0x1c>)
  40090c:	4798      	blx	r3
  40090e:	bd08      	pop	{r3, pc}
		pio_clear(p_pio, ul_mask);
  400910:	4611      	mov	r1, r2
  400912:	4618      	mov	r0, r3
  400914:	4b02      	ldr	r3, [pc, #8]	; (400920 <ov_power+0x20>)
  400916:	4798      	blx	r3
  400918:	bd08      	pop	{r3, pc}
  40091a:	bf00      	nop
  40091c:	00400f8d 	.word	0x00400f8d
  400920:	00400f91 	.word	0x00400f91

00400924 <ov_read_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_read_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400924:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_read(p_twi, p_packet);
  400926:	4b01      	ldr	r3, [pc, #4]	; (40092c <ov_read_reg+0x8>)
  400928:	4798      	blx	r3

	return ul_status;
}
  40092a:	bd08      	pop	{r3, pc}
  40092c:	004004d5 	.word	0x004004d5

00400930 <ov_write_reg>:
 * \param p_twi TWI interface.
 * \param p_packet TWI packet.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_reg(Twi* const p_twi, twi_packet_t* const p_packet)
{
  400930:	b508      	push	{r3, lr}
	uint32_t ul_status;

	ul_status = twi_master_write(p_twi, p_packet);
  400932:	4b01      	ldr	r3, [pc, #4]	; (400938 <ov_write_reg+0x8>)
  400934:	4798      	blx	r3

	return ul_status;
}
  400936:	bd08      	pop	{r3, pc}
  400938:	00400595 	.word	0x00400595

0040093c <ov_write_regs>:
 * \param p_twi TWI interface.
 * \param p_reg_list Register list to be written.
 * \return 0 on success, TWID_ERROR_BUSY otherwise.
 */
uint32_t ov_write_regs(Twi* const p_twi, const ov_reg *p_reg_list)
{
  40093c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400940:	b086      	sub	sp, #24
  400942:	4607      	mov	r7, r0
  400944:	1c4c      	adds	r4, r1, #1
			(p_next->val == OV_VAL_TERM))) {
		if (p_next->reg == 0xFE) {
			delay_ms(5);
		} else {
			twi_packet_regs.addr[0] = p_next->reg;
			twi_packet_regs.addr_length = 1;
  400946:	2501      	movs	r5, #1
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
			twi_packet_regs.length = 1;
			twi_packet_regs.buffer = &(p_next->val);

			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400948:	4e11      	ldr	r6, [pc, #68]	; (400990 <ov_write_regs+0x54>)
			delay_ms(5);
  40094a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400994 <ov_write_regs+0x58>
	while (!((p_next->reg == OV_REG_TERM) &&
  40094e:	e010      	b.n	400972 <ov_write_regs+0x36>
  400950:	7821      	ldrb	r1, [r4, #0]
  400952:	29ff      	cmp	r1, #255	; 0xff
  400954:	d018      	beq.n	400988 <ov_write_regs+0x4c>
			twi_packet_regs.addr[0] = p_next->reg;
  400956:	f88d 3004 	strb.w	r3, [sp, #4]
			twi_packet_regs.addr_length = 1;
  40095a:	9502      	str	r5, [sp, #8]
			twi_packet_regs.chip = OV_I2C_SENSOR_ADDRESS;
  40095c:	2330      	movs	r3, #48	; 0x30
  40095e:	f88d 3014 	strb.w	r3, [sp, #20]
			twi_packet_regs.length = 1;
  400962:	9504      	str	r5, [sp, #16]
			twi_packet_regs.buffer = &(p_next->val);
  400964:	9203      	str	r2, [sp, #12]
			ul_err = ov_write_reg(p_twi, &twi_packet_regs);
  400966:	a901      	add	r1, sp, #4
  400968:	4638      	mov	r0, r7
  40096a:	47b0      	blx	r6
			ul_size++;

			if (ul_err == TWI_BUSY) {
  40096c:	2808      	cmp	r0, #8
  40096e:	d00c      	beq.n	40098a <ov_write_regs+0x4e>
  400970:	3402      	adds	r4, #2
  400972:	4622      	mov	r2, r4
	while (!((p_next->reg == OV_REG_TERM) &&
  400974:	f814 3c01 	ldrb.w	r3, [r4, #-1]
  400978:	2bff      	cmp	r3, #255	; 0xff
  40097a:	d0e9      	beq.n	400950 <ov_write_regs+0x14>
		if (p_next->reg == 0xFE) {
  40097c:	2bfe      	cmp	r3, #254	; 0xfe
  40097e:	d1ea      	bne.n	400956 <ov_write_regs+0x1a>
			delay_ms(5);
  400980:	f24a 706a 	movw	r0, #42858	; 0xa76a
  400984:	47c0      	blx	r8
  400986:	e7f3      	b.n	400970 <ov_write_regs+0x34>
			}
		}

		p_next++;
	}
	return 0;
  400988:	2000      	movs	r0, #0
}
  40098a:	b006      	add	sp, #24
  40098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400990:	00400931 	.word	0x00400931
  400994:	20000001 	.word	0x20000001

00400998 <ov_init>:
 *
 * \param p_twi TWI interface.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_init(Twi* const p_twi)
{
  400998:	b5f0      	push	{r4, r5, r6, r7, lr}
  40099a:	b093      	sub	sp, #76	; 0x4c
  40099c:	4607      	mov	r7, r0
	const uint8_t cont_reg_val = 1;
  40099e:	2401      	movs	r4, #1
  4009a0:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
	twi_packet_t init_packet = {
  4009a4:	2500      	movs	r5, #0
  4009a6:	950c      	str	r5, [sp, #48]	; 0x30
  4009a8:	9510      	str	r5, [sp, #64]	; 0x40
  4009aa:	23ff      	movs	r3, #255	; 0xff
  4009ac:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  4009b0:	940d      	str	r4, [sp, #52]	; 0x34
  4009b2:	f10d 0347 	add.w	r3, sp, #71	; 0x47
  4009b6:	930e      	str	r3, [sp, #56]	; 0x38
  4009b8:	940f      	str	r4, [sp, #60]	; 0x3c
  4009ba:	2630      	movs	r6, #48	; 0x30
  4009bc:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
		.addr_length  = 1, //sizeof (uint16_t),    // TWI slave memory address data size
		.chip         = OV_I2C_SENSOR_ADDRESS,      // TWI slave bus address
		.buffer       = &cont_reg_val,        // transfer data destination buffer
		.length       = 1                    // transfer data size (bytes)
	};
	ov_write_reg(p_twi, &init_packet);
  4009c0:	eb0d 0106 	add.w	r1, sp, r6
  4009c4:	4b41      	ldr	r3, [pc, #260]	; (400acc <ov_init+0x134>)
  4009c6:	4798      	blx	r3
	uint32_t ul_id = 0;
  4009c8:	9500      	str	r5, [sp, #0]
	uint32_t ul_ver = 0;
  4009ca:	9501      	str	r5, [sp, #4]
	packet_pid.chip = OV_I2C_SENSOR_ADDRESS;
  4009cc:	f88d 6018 	strb.w	r6, [sp, #24]
	packet_pid.addr[0] = OV2640_PIDH;
  4009d0:	230a      	movs	r3, #10
  4009d2:	f88d 3008 	strb.w	r3, [sp, #8]
	packet_pid.addr_length = 1;
  4009d6:	9403      	str	r4, [sp, #12]
	packet_pid.buffer = &ul_id;
  4009d8:	f8cd d010 	str.w	sp, [sp, #16]
	packet_pid.length = 1;
  4009dc:	9405      	str	r4, [sp, #20]
	ov_read_reg(p_twi, &packet_pid);
  4009de:	a902      	add	r1, sp, #8
  4009e0:	4638      	mov	r0, r7
  4009e2:	4d3b      	ldr	r5, [pc, #236]	; (400ad0 <ov_init+0x138>)
  4009e4:	47a8      	blx	r5
	packet_ver.chip = OV_I2C_SENSOR_ADDRESS;
  4009e6:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	packet_ver.addr[0] = OV2640_PIDL;
  4009ea:	230b      	movs	r3, #11
  4009ec:	f88d 301c 	strb.w	r3, [sp, #28]
	packet_ver.addr_length = 1;
  4009f0:	9408      	str	r4, [sp, #32]
	packet_ver.buffer = &ul_ver;
  4009f2:	ab01      	add	r3, sp, #4
  4009f4:	9309      	str	r3, [sp, #36]	; 0x24
	packet_ver.length = 1;
  4009f6:	940a      	str	r4, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &packet_ver);
  4009f8:	a907      	add	r1, sp, #28
  4009fa:	4638      	mov	r0, r7
  4009fc:	47a8      	blx	r5
	return ((uint32_t)(ul_id << 8) | ul_ver);
  4009fe:	9b01      	ldr	r3, [sp, #4]
  400a00:	9a00      	ldr	r2, [sp, #0]
  400a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	
	uint32_t ul_id = 0;

	ul_id = ov_id( p_twi );

	if (((ul_id >> 8)&0xff)  == OV2640_PIDH_DEFAULT) {
  400a06:	f3c3 2307 	ubfx	r3, r3, #8, #8
  400a0a:	2b26      	cmp	r3, #38	; 0x26
  400a0c:	d002      	beq.n	400a14 <ov_init+0x7c>
				return 0;
			}
		}
	}

	return 1;
  400a0e:	2001      	movs	r0, #1
}
  400a10:	b013      	add	sp, #76	; 0x4c
  400a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t ul_midh = 0;
  400a14:	2300      	movs	r3, #0
  400a16:	9301      	str	r3, [sp, #4]
	uint32_t ul_midl = 0;
  400a18:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = OV2640_MIDH;
  400a1a:	231c      	movs	r3, #28
  400a1c:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400a20:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400a22:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midh;
  400a26:	ab01      	add	r3, sp, #4
  400a28:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  400a2a:	940a      	str	r4, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &twi_packet);
  400a2c:	a907      	add	r1, sp, #28
  400a2e:	4638      	mov	r0, r7
  400a30:	47a8      	blx	r5
	twi_packet.addr[0] = OV2640_MIDL;
  400a32:	231d      	movs	r3, #29
  400a34:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400a38:	9408      	str	r4, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400a3a:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
	twi_packet.buffer = &ul_midl;
  400a3e:	ab02      	add	r3, sp, #8
  400a40:	9309      	str	r3, [sp, #36]	; 0x24
	twi_packet.length = 1;
  400a42:	940a      	str	r4, [sp, #40]	; 0x28
	ov_read_reg(p_twi, &twi_packet);
  400a44:	a907      	add	r1, sp, #28
  400a46:	4638      	mov	r0, r7
  400a48:	47a8      	blx	r5
	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  400a4a:	9b01      	ldr	r3, [sp, #4]
  400a4c:	2b7f      	cmp	r3, #127	; 0x7f
  400a4e:	d001      	beq.n	400a54 <ov_init+0xbc>
	return 1;
  400a50:	2001      	movs	r0, #1
  400a52:	e7dd      	b.n	400a10 <ov_init+0x78>
	if ((ul_midh == OV2640_MIDH_DEFAULT) && (ul_midl == OV2640_MIDL_DEFAULT)) {
  400a54:	9b02      	ldr	r3, [sp, #8]
  400a56:	2ba2      	cmp	r3, #162	; 0xa2
  400a58:	d1fa      	bne.n	400a50 <ov_init+0xb8>
	uint32_t ul_value = 0;
  400a5a:	2300      	movs	r3, #0
  400a5c:	9300      	str	r3, [sp, #0]
	uint32_t ul_oldvalue = 0;
  400a5e:	9301      	str	r3, [sp, #4]
	uint32_t ul_entervalue = 0;
  400a60:	9302      	str	r3, [sp, #8]
	twi_packet.addr[0] = 0x01;
  400a62:	2301      	movs	r3, #1
  400a64:	f88d 301c 	strb.w	r3, [sp, #28]
	twi_packet.addr_length = 1;
  400a68:	9308      	str	r3, [sp, #32]
	twi_packet.chip = OV_I2C_SENSOR_ADDRESS;
  400a6a:	2230      	movs	r2, #48	; 0x30
  400a6c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	twi_packet.length = 1;
  400a70:	930a      	str	r3, [sp, #40]	; 0x28
	twi_packet.buffer = &ul_oldvalue;
  400a72:	ab01      	add	r3, sp, #4
  400a74:	9309      	str	r3, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400a76:	a907      	add	r1, sp, #28
  400a78:	4638      	mov	r0, r7
  400a7a:	4c15      	ldr	r4, [pc, #84]	; (400ad0 <ov_init+0x138>)
  400a7c:	47a0      	blx	r4
	ul_entervalue = 0xAD;
  400a7e:	ab12      	add	r3, sp, #72	; 0x48
  400a80:	22ad      	movs	r2, #173	; 0xad
  400a82:	f843 2d40 	str.w	r2, [r3, #-64]!
	twi_packet.buffer = &ul_entervalue;
  400a86:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400a88:	a907      	add	r1, sp, #28
  400a8a:	4638      	mov	r0, r7
  400a8c:	4b0f      	ldr	r3, [pc, #60]	; (400acc <ov_init+0x134>)
  400a8e:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  400a90:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400a94:	a907      	add	r1, sp, #28
  400a96:	4638      	mov	r0, r7
  400a98:	47a0      	blx	r4
	if (ul_value != ul_entervalue) {
  400a9a:	9b02      	ldr	r3, [sp, #8]
  400a9c:	9a00      	ldr	r2, [sp, #0]
  400a9e:	429a      	cmp	r2, r3
  400aa0:	d001      	beq.n	400aa6 <ov_init+0x10e>
		return 1;
  400aa2:	2001      	movs	r0, #1
  400aa4:	e7b4      	b.n	400a10 <ov_init+0x78>
	twi_packet.buffer = &ul_oldvalue;
  400aa6:	ab01      	add	r3, sp, #4
  400aa8:	9309      	str	r3, [sp, #36]	; 0x24
	ov_write_reg(p_twi, &twi_packet);
  400aaa:	a907      	add	r1, sp, #28
  400aac:	4638      	mov	r0, r7
  400aae:	4b07      	ldr	r3, [pc, #28]	; (400acc <ov_init+0x134>)
  400ab0:	4798      	blx	r3
	twi_packet.buffer = &ul_value;
  400ab2:	f8cd d024 	str.w	sp, [sp, #36]	; 0x24
	ov_read_reg(p_twi, &twi_packet);
  400ab6:	a907      	add	r1, sp, #28
  400ab8:	4638      	mov	r0, r7
  400aba:	4b05      	ldr	r3, [pc, #20]	; (400ad0 <ov_init+0x138>)
  400abc:	4798      	blx	r3
	if (ul_value != ul_oldvalue) {
  400abe:	9b01      	ldr	r3, [sp, #4]
  400ac0:	9800      	ldr	r0, [sp, #0]
  400ac2:	1ac0      	subs	r0, r0, r3
  400ac4:	bf18      	it	ne
  400ac6:	2001      	movne	r0, #1
  400ac8:	e7a2      	b.n	400a10 <ov_init+0x78>
  400aca:	bf00      	nop
  400acc:	00400931 	.word	0x00400931
  400ad0:	00400925 	.word	0x00400925

00400ad4 <ov_configure>:
 * \param p_twi TWI interface.
 * \param format Specific format to configure.
 * \return 0 on success, 1 otherwise.
 */
uint32_t ov_configure(Twi* const p_twi, const e_OV2640_format format)
{
  400ad4:	b508      	push	{r3, lr}
	const ov_reg *p_regs_conf = NULL;

	/* Common register initialization */
	switch (format) {
  400ad6:	2911      	cmp	r1, #17
  400ad8:	d82a      	bhi.n	400b30 <ov_configure+0x5c>
  400ada:	e8df f001 	tbb	[pc, r1]
  400ade:	092b      	.short	0x092b
  400ae0:	0f0d0b2d 	.word	0x0f0d0b2d
  400ae4:	17151311 	.word	0x17151311
  400ae8:	1f1d1b19 	.word	0x1f1d1b19
  400aec:	27252321 	.word	0x27252321
	case JPEG_INIT:
		p_regs_conf = OV2640_JPEG_INIT;
		break;
		
	case YUV422:
		p_regs_conf = OV2640_YUV422;
  400af0:	4914      	ldr	r1, [pc, #80]	; (400b44 <ov_configure+0x70>)
  400af2:	e022      	b.n	400b3a <ov_configure+0x66>
	case JPEG:
		p_regs_conf = OV2640_JPEG;
		break;
		
	case JPEG_320x240:
		p_regs_conf = OV2640_JPEG_320x240;
  400af4:	4914      	ldr	r1, [pc, #80]	; (400b48 <ov_configure+0x74>)
		break;
  400af6:	e020      	b.n	400b3a <ov_configure+0x66>
		
	case JPEG_640x480:
		p_regs_conf = OV2640_JPEG_640x480;
  400af8:	4914      	ldr	r1, [pc, #80]	; (400b4c <ov_configure+0x78>)
		break;
  400afa:	e01e      	b.n	400b3a <ov_configure+0x66>
		
	case JPEG_800x600:
		p_regs_conf = OV2640_JPEG_800x600;
  400afc:	4914      	ldr	r1, [pc, #80]	; (400b50 <ov_configure+0x7c>)
		break;
  400afe:	e01c      	b.n	400b3a <ov_configure+0x66>
		
	case JPEG_1024x768:
		p_regs_conf = OV2640_JPEG_1024x768;
  400b00:	4914      	ldr	r1, [pc, #80]	; (400b54 <ov_configure+0x80>)
		break;
  400b02:	e01a      	b.n	400b3a <ov_configure+0x66>
		
	case JPEG_1280x1024:
		p_regs_conf = OV2640_JPEG_1280x1024;
  400b04:	4914      	ldr	r1, [pc, #80]	; (400b58 <ov_configure+0x84>)
		break;
  400b06:	e018      	b.n	400b3a <ov_configure+0x66>
		
	case JPEG_1600x1200:
		p_regs_conf = OV2640_JPEG_1600x1200;
  400b08:	4914      	ldr	r1, [pc, #80]	; (400b5c <ov_configure+0x88>)
		break;
  400b0a:	e016      	b.n	400b3a <ov_configure+0x66>
		
	case QVGA_YUV422_10FPS:
		p_regs_conf = OV2640_QVGA_YUV422_10FPS;
  400b0c:	4914      	ldr	r1, [pc, #80]	; (400b60 <ov_configure+0x8c>)
		break;
  400b0e:	e014      	b.n	400b3a <ov_configure+0x66>

	case QVGA_YUV422_15FPS:
		p_regs_conf = OV2640_QVGA_YUV422_15FPS;
  400b10:	4914      	ldr	r1, [pc, #80]	; (400b64 <ov_configure+0x90>)
		break;
  400b12:	e012      	b.n	400b3a <ov_configure+0x66>

	case QVGA_YUV422_20FPS:
		p_regs_conf = OV2640_QVGA_YUV422_20FPS;
  400b14:	4914      	ldr	r1, [pc, #80]	; (400b68 <ov_configure+0x94>)
		break;
  400b16:	e010      	b.n	400b3a <ov_configure+0x66>

	case QVGA_YUV422_30FPS:
		p_regs_conf = OV2640_QVGA_YUV422_30FPS;
  400b18:	4914      	ldr	r1, [pc, #80]	; (400b6c <ov_configure+0x98>)
		break;
  400b1a:	e00e      	b.n	400b3a <ov_configure+0x66>

	case QVGA_RGB888:
		p_regs_conf = OV2640_QVGA_RGB888;
  400b1c:	4914      	ldr	r1, [pc, #80]	; (400b70 <ov_configure+0x9c>)
		break;
  400b1e:	e00c      	b.n	400b3a <ov_configure+0x66>

	case QQVGA_YUV422:
		p_regs_conf = OV2640_QQVGA_YUV422;
  400b20:	4914      	ldr	r1, [pc, #80]	; (400b74 <ov_configure+0xa0>)
		break;
  400b22:	e00a      	b.n	400b3a <ov_configure+0x66>

	case QQVGA_RGB888:
		p_regs_conf = OV2640_QQVGA_RGB888;
  400b24:	4914      	ldr	r1, [pc, #80]	; (400b78 <ov_configure+0xa4>)
		break;
  400b26:	e008      	b.n	400b3a <ov_configure+0x66>

	case TEST_PATTERN:
		p_regs_conf = OV2640_TEST_PATTERN;
  400b28:	4914      	ldr	r1, [pc, #80]	; (400b7c <ov_configure+0xa8>)
		break;
  400b2a:	e006      	b.n	400b3a <ov_configure+0x66>

	case VGA_YUV422_20FPS:
		p_regs_conf = OV2640_VGA_YUV422_20FPS;
  400b2c:	4914      	ldr	r1, [pc, #80]	; (400b80 <ov_configure+0xac>)
		break;
  400b2e:	e004      	b.n	400b3a <ov_configure+0x66>
	if (p_regs_conf != NULL) {
		ov_write_regs( p_twi, p_regs_conf );
		return 0;
	}

	return 1;
  400b30:	2001      	movs	r0, #1
  400b32:	bd08      	pop	{r3, pc}
		p_regs_conf = OV2640_JPEG_INIT;
  400b34:	4913      	ldr	r1, [pc, #76]	; (400b84 <ov_configure+0xb0>)
  400b36:	e000      	b.n	400b3a <ov_configure+0x66>
		p_regs_conf = OV2640_JPEG;
  400b38:	4913      	ldr	r1, [pc, #76]	; (400b88 <ov_configure+0xb4>)
		ov_write_regs( p_twi, p_regs_conf );
  400b3a:	4b14      	ldr	r3, [pc, #80]	; (400b8c <ov_configure+0xb8>)
  400b3c:	4798      	blx	r3
		return 0;
  400b3e:	2000      	movs	r0, #0
}
  400b40:	bd08      	pop	{r3, pc}
  400b42:	bf00      	nop
  400b44:	00402ac0 	.word	0x00402ac0
  400b48:	00401fc8 	.word	0x00401fc8
  400b4c:	00402018 	.word	0x00402018
  400b50:	0040206c 	.word	0x0040206c
  400b54:	00401ed0 	.word	0x00401ed0
  400b58:	00401f20 	.word	0x00401f20
  400b5c:	00401f74 	.word	0x00401f74
  400b60:	0040251c 	.word	0x0040251c
  400b64:	0040260c 	.word	0x0040260c
  400b68:	004026fc 	.word	0x004026fc
  400b6c:	004027ec 	.word	0x004027ec
  400b70:	00402428 	.word	0x00402428
  400b74:	00402334 	.word	0x00402334
  400b78:	00402240 	.word	0x00402240
  400b7c:	004028dc 	.word	0x004028dc
  400b80:	004029d0 	.word	0x004029d0
  400b84:	004020c0 	.word	0x004020c0
  400b88:	00401ebc 	.word	0x00401ebc
  400b8c:	0040093d 	.word	0x0040093d

00400b90 <TC0_Handler>:
 */ 

#include "timer_interface.h"

void TC0_Handler(void)
{
  400b90:	b508      	push	{r3, lr}
	uint32_t ul_status;

	// Read TC0 status.
	ul_status = tc_get_status(TC0, 0);
  400b92:	2100      	movs	r1, #0
  400b94:	4805      	ldr	r0, [pc, #20]	; (400bac <TC0_Handler+0x1c>)
  400b96:	4b06      	ldr	r3, [pc, #24]	; (400bb0 <TC0_Handler+0x20>)
  400b98:	4798      	blx	r3

	// RC compare.
	if ((ul_status & TC_SR_CPCS) == TC_SR_CPCS) {
  400b9a:	f010 0f10 	tst.w	r0, #16
  400b9e:	d004      	beq.n	400baa <TC0_Handler+0x1a>
		counts++;
  400ba0:	4a04      	ldr	r2, [pc, #16]	; (400bb4 <TC0_Handler+0x24>)
  400ba2:	7813      	ldrb	r3, [r2, #0]
  400ba4:	3301      	adds	r3, #1
  400ba6:	b2db      	uxtb	r3, r3
  400ba8:	7013      	strb	r3, [r2, #0]
  400baa:	bd08      	pop	{r3, pc}
  400bac:	40010000 	.word	0x40010000
  400bb0:	00400341 	.word	0x00400341
  400bb4:	200004f2 	.word	0x200004f2

00400bb8 <configure_tc>:
	}
}

void configure_tc(void)
{
  400bb8:	b530      	push	{r4, r5, lr}
  400bba:	b085      	sub	sp, #20

	// Get system clock.
	ul_sysclk = sysclk_get_cpu_hz();

	// Configure PMC.
	pmc_enable_periph_clk(ID_TC0);
  400bbc:	2017      	movs	r0, #23
  400bbe:	4b14      	ldr	r3, [pc, #80]	; (400c10 <configure_tc+0x58>)
  400bc0:	4798      	blx	r3

	// Configure TC for a 1Hz frequency and trigger on RC compare.
	tc_find_mck_divisor(TC_FREQ, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  400bc2:	4d14      	ldr	r5, [pc, #80]	; (400c14 <configure_tc+0x5c>)
  400bc4:	9500      	str	r5, [sp, #0]
  400bc6:	ab02      	add	r3, sp, #8
  400bc8:	aa03      	add	r2, sp, #12
  400bca:	4629      	mov	r1, r5
  400bcc:	2001      	movs	r0, #1
  400bce:	4c12      	ldr	r4, [pc, #72]	; (400c18 <configure_tc+0x60>)
  400bd0:	47a0      	blx	r4
	tc_init(TC0, 0, ul_tcclks | TC_CMR_CPCTRG);
  400bd2:	4c12      	ldr	r4, [pc, #72]	; (400c1c <configure_tc+0x64>)
  400bd4:	9a02      	ldr	r2, [sp, #8]
  400bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400bda:	2100      	movs	r1, #0
  400bdc:	4620      	mov	r0, r4
  400bde:	4b10      	ldr	r3, [pc, #64]	; (400c20 <configure_tc+0x68>)
  400be0:	4798      	blx	r3
	tc_write_rc(TC0, 0, (ul_sysclk / ul_div) / TC_FREQ);
  400be2:	9a03      	ldr	r2, [sp, #12]
  400be4:	fbb5 f2f2 	udiv	r2, r5, r2
  400be8:	2100      	movs	r1, #0
  400bea:	4620      	mov	r0, r4
  400bec:	4b0d      	ldr	r3, [pc, #52]	; (400c24 <configure_tc+0x6c>)
  400bee:	4798      	blx	r3
  400bf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400bf4:	4b0c      	ldr	r3, [pc, #48]	; (400c28 <configure_tc+0x70>)
  400bf6:	601a      	str	r2, [r3, #0]

	// Configure and enable interrupt on RC compare.
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
  400bf8:	2210      	movs	r2, #16
  400bfa:	2100      	movs	r1, #0
  400bfc:	4620      	mov	r0, r4
  400bfe:	4b0b      	ldr	r3, [pc, #44]	; (400c2c <configure_tc+0x74>)
  400c00:	4798      	blx	r3
	
	// Start the timer
	tc_start(TC0, 0);
  400c02:	2100      	movs	r1, #0
  400c04:	4620      	mov	r0, r4
  400c06:	4b0a      	ldr	r3, [pc, #40]	; (400c30 <configure_tc+0x78>)
  400c08:	4798      	blx	r3
  400c0a:	b005      	add	sp, #20
  400c0c:	bd30      	pop	{r4, r5, pc}
  400c0e:	bf00      	nop
  400c10:	004012c1 	.word	0x004012c1
  400c14:	07270e00 	.word	0x07270e00
  400c18:	00400349 	.word	0x00400349
  400c1c:	40010000 	.word	0x40010000
  400c20:	00400311 	.word	0x00400311
  400c24:	00400331 	.word	0x00400331
  400c28:	e000e100 	.word	0xe000e100
  400c2c:	00400339 	.word	0x00400339
  400c30:	00400329 	.word	0x00400329

00400c34 <process_incoming_byte_wifi>:
}


void process_incoming_byte_wifi(uint8_t in_byte)
{
	input_line_wifi[input_pos_wifi++] = in_byte;
  400c34:	4a03      	ldr	r2, [pc, #12]	; (400c44 <process_incoming_byte_wifi+0x10>)
  400c36:	6813      	ldr	r3, [r2, #0]
  400c38:	1c59      	adds	r1, r3, #1
  400c3a:	6011      	str	r1, [r2, #0]
  400c3c:	4a02      	ldr	r2, [pc, #8]	; (400c48 <process_incoming_byte_wifi+0x14>)
  400c3e:	54d0      	strb	r0, [r2, r3]
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop
  400c44:	200004dc 	.word	0x200004dc
  400c48:	200004f4 	.word	0x200004f4

00400c4c <USART0_Handler>:
void WIFI_USART_HANDLER(void){
  400c4c:	b510      	push	{r4, lr}
	ul_status = usart_get_status(WIFI_USART);
  400c4e:	480a      	ldr	r0, [pc, #40]	; (400c78 <USART0_Handler+0x2c>)
  400c50:	4b0a      	ldr	r3, [pc, #40]	; (400c7c <USART0_Handler+0x30>)
  400c52:	4798      	blx	r3
	if (ul_status & US_CSR_RXBUFF) {
  400c54:	f410 5f80 	tst.w	r0, #4096	; 0x1000
  400c58:	d100      	bne.n	400c5c <USART0_Handler+0x10>
  400c5a:	bd10      	pop	{r4, pc}
		usart_read(WIFI_USART, &received_byte_wifi);
  400c5c:	4c08      	ldr	r4, [pc, #32]	; (400c80 <USART0_Handler+0x34>)
  400c5e:	4621      	mov	r1, r4
  400c60:	4805      	ldr	r0, [pc, #20]	; (400c78 <USART0_Handler+0x2c>)
  400c62:	4b08      	ldr	r3, [pc, #32]	; (400c84 <USART0_Handler+0x38>)
  400c64:	4798      	blx	r3
		new_rx_wifi = true;
  400c66:	2201      	movs	r2, #1
  400c68:	4b07      	ldr	r3, [pc, #28]	; (400c88 <USART0_Handler+0x3c>)
  400c6a:	701a      	strb	r2, [r3, #0]
		process_incoming_byte_wifi((uint8_t)received_byte_wifi);
  400c6c:	6820      	ldr	r0, [r4, #0]
  400c6e:	b2c0      	uxtb	r0, r0
  400c70:	4b06      	ldr	r3, [pc, #24]	; (400c8c <USART0_Handler+0x40>)
  400c72:	4798      	blx	r3
}
  400c74:	e7f1      	b.n	400c5a <USART0_Handler+0xe>
  400c76:	bf00      	nop
  400c78:	40024000 	.word	0x40024000
  400c7c:	0040070d 	.word	0x0040070d
  400c80:	200004e4 	.word	0x200004e4
  400c84:	00400745 	.word	0x00400745
  400c88:	200004e0 	.word	0x200004e0
  400c8c:	00400c35 	.word	0x00400c35

00400c90 <process_data_wifi>:
}

void process_data_wifi(void)
{
  400c90:	b508      	push	{r3, lr}
	if (strstr(input_line_wifi, "SUCCESS")) {
  400c92:	4904      	ldr	r1, [pc, #16]	; (400ca4 <process_data_wifi+0x14>)
  400c94:	4804      	ldr	r0, [pc, #16]	; (400ca8 <process_data_wifi+0x18>)
  400c96:	4b05      	ldr	r3, [pc, #20]	; (400cac <process_data_wifi+0x1c>)
  400c98:	4798      	blx	r3
  400c9a:	b110      	cbz	r0, 400ca2 <process_data_wifi+0x12>
		uart_test_success = true; // REPLACE WITH ACTUAL CODE FOR CAMERA
  400c9c:	2201      	movs	r2, #1
  400c9e:	4b04      	ldr	r3, [pc, #16]	; (400cb0 <process_data_wifi+0x20>)
  400ca0:	701a      	strb	r2, [r3, #0]
  400ca2:	bd08      	pop	{r3, pc}
  400ca4:	00402aec 	.word	0x00402aec
  400ca8:	200004f4 	.word	0x200004f4
  400cac:	0040199d 	.word	0x0040199d
  400cb0:	200004f0 	.word	0x200004f0

00400cb4 <wifi_command_response_handler>:
{
  400cb4:	b508      	push	{r3, lr}
	wifi_comm_success = true;
  400cb6:	2201      	movs	r2, #1
  400cb8:	4b07      	ldr	r3, [pc, #28]	; (400cd8 <wifi_command_response_handler+0x24>)
  400cba:	701a      	strb	r2, [r3, #0]
	process_data_wifi();
  400cbc:	4b07      	ldr	r3, [pc, #28]	; (400cdc <wifi_command_response_handler+0x28>)
  400cbe:	4798      	blx	r3
	for (int jj=0;jj<MAX_INPUT_WIFI;jj++) input_line_wifi[jj] = 0;
  400cc0:	2300      	movs	r3, #0
  400cc2:	4907      	ldr	r1, [pc, #28]	; (400ce0 <wifi_command_response_handler+0x2c>)
  400cc4:	461a      	mov	r2, r3
  400cc6:	54ca      	strb	r2, [r1, r3]
  400cc8:	3301      	adds	r3, #1
  400cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  400cce:	d1fa      	bne.n	400cc6 <wifi_command_response_handler+0x12>
	input_pos_wifi = 0;
  400cd0:	2200      	movs	r2, #0
  400cd2:	4b04      	ldr	r3, [pc, #16]	; (400ce4 <wifi_command_response_handler+0x30>)
  400cd4:	601a      	str	r2, [r3, #0]
  400cd6:	bd08      	pop	{r3, pc}
  400cd8:	200004f1 	.word	0x200004f1
  400cdc:	00400c91 	.word	0x00400c91
  400ce0:	200004f4 	.word	0x200004f4
  400ce4:	200004dc 	.word	0x200004dc

00400ce8 <configure_usart_wifi>:
	}
}

void configure_usart_wifi(void)
{
  400ce8:	b530      	push	{r4, r5, lr}
  400cea:	b087      	sub	sp, #28
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
  400cec:	4d16      	ldr	r5, [pc, #88]	; (400d48 <configure_usart_wifi+0x60>)
  400cee:	4629      	mov	r1, r5
  400cf0:	2005      	movs	r0, #5
  400cf2:	4c16      	ldr	r4, [pc, #88]	; (400d4c <configure_usart_wifi+0x64>)
  400cf4:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
  400cf6:	4629      	mov	r1, r5
  400cf8:	2006      	movs	r0, #6
  400cfa:	47a0      	blx	r4
	
	const sam_usart_opt_t usart_console_settings = {
  400cfc:	466c      	mov	r4, sp
  400cfe:	4d14      	ldr	r5, [pc, #80]	; (400d50 <configure_usart_wifi+0x68>)
  400d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400d04:	e895 0003 	ldmia.w	r5, {r0, r1}
  400d08:	e884 0003 	stmia.w	r4, {r0, r1}
  400d0c:	200e      	movs	r0, #14
  400d0e:	4b11      	ldr	r3, [pc, #68]	; (400d54 <configure_usart_wifi+0x6c>)
  400d10:	4798      	blx	r3
	
	/* Enable the peripheral clock */
	sysclk_enable_peripheral_clock(WIFI_USART_ID);
	
	/* Configure USART */
	usart_init_rs232(WIFI_USART, &usart_console_settings,sysclk_get_peripheral_hz());
  400d12:	4c11      	ldr	r4, [pc, #68]	; (400d58 <configure_usart_wifi+0x70>)
  400d14:	4a11      	ldr	r2, [pc, #68]	; (400d5c <configure_usart_wifi+0x74>)
  400d16:	4669      	mov	r1, sp
  400d18:	4620      	mov	r0, r4
  400d1a:	4b11      	ldr	r3, [pc, #68]	; (400d60 <configure_usart_wifi+0x78>)
  400d1c:	4798      	blx	r3
	
	/* Disable all the interrupts. */
	usart_disable_interrupt(WIFI_USART, ALL_INTERRUPT_MASK);
  400d1e:	f04f 31ff 	mov.w	r1, #4294967295
  400d22:	4620      	mov	r0, r4
  400d24:	4b0f      	ldr	r3, [pc, #60]	; (400d64 <configure_usart_wifi+0x7c>)
  400d26:	4798      	blx	r3
	
	/* Enable the receiver and transmitter. */
	usart_enable_tx(WIFI_USART);
  400d28:	4620      	mov	r0, r4
  400d2a:	4b0f      	ldr	r3, [pc, #60]	; (400d68 <configure_usart_wifi+0x80>)
  400d2c:	4798      	blx	r3
	usart_enable_rx(WIFI_USART);
  400d2e:	4620      	mov	r0, r4
  400d30:	4b0e      	ldr	r3, [pc, #56]	; (400d6c <configure_usart_wifi+0x84>)
  400d32:	4798      	blx	r3
  400d34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  400d38:	4b0d      	ldr	r3, [pc, #52]	; (400d70 <configure_usart_wifi+0x88>)
  400d3a:	601a      	str	r2, [r3, #0]

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(WIFI_USART_IRQn);
	
	usart_enable_interrupt(WIFI_USART, US_IER_RXRDY);
  400d3c:	2101      	movs	r1, #1
  400d3e:	4620      	mov	r0, r4
  400d40:	4b0c      	ldr	r3, [pc, #48]	; (400d74 <configure_usart_wifi+0x8c>)
  400d42:	4798      	blx	r3
}
  400d44:	b007      	add	sp, #28
  400d46:	bd30      	pop	{r4, r5, pc}
  400d48:	08000001 	.word	0x08000001
  400d4c:	004010b9 	.word	0x004010b9
  400d50:	00402ad4 	.word	0x00402ad4
  400d54:	004012c1 	.word	0x004012c1
  400d58:	40024000 	.word	0x40024000
  400d5c:	07270e00 	.word	0x07270e00
  400d60:	004006a5 	.word	0x004006a5
  400d64:	00400709 	.word	0x00400709
  400d68:	004006f9 	.word	0x004006f9
  400d6c:	004006ff 	.word	0x004006ff
  400d70:	e000e100 	.word	0xe000e100
  400d74:	00400705 	.word	0x00400705

00400d78 <configure_wifi_comm_pin>:

void configure_wifi_comm_pin(void)
{
  400d78:	b530      	push	{r4, r5, lr}
  400d7a:	b083      	sub	sp, #12
	/* Configure PIO clock */
	pmc_enable_periph_clk(WIFI_COMM_ID);
  400d7c:	200c      	movs	r0, #12
  400d7e:	4b0b      	ldr	r3, [pc, #44]	; (400dac <configure_wifi_comm_pin+0x34>)
  400d80:	4798      	blx	r3
	
	/* Initialize PIO interrupt handler */
	pio_handler_set(WIFI_COMM_PIO, WIFI_COMM_ID, WIFI_COMM_PIN_NUM, WIFI_COMM_ATTR, wifi_command_response_handler);
  400d82:	4c0b      	ldr	r4, [pc, #44]	; (400db0 <configure_wifi_comm_pin+0x38>)
  400d84:	4b0b      	ldr	r3, [pc, #44]	; (400db4 <configure_wifi_comm_pin+0x3c>)
  400d86:	9300      	str	r3, [sp, #0]
  400d88:	2370      	movs	r3, #112	; 0x70
  400d8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  400d8e:	210c      	movs	r1, #12
  400d90:	4620      	mov	r0, r4
  400d92:	4d09      	ldr	r5, [pc, #36]	; (400db8 <configure_wifi_comm_pin+0x40>)
  400d94:	47a8      	blx	r5
  400d96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400d9a:	4b08      	ldr	r3, [pc, #32]	; (400dbc <configure_wifi_comm_pin+0x44>)
  400d9c:	601a      	str	r2, [r3, #0]
	
	/* Enable PIO controller IRQs. */
	NVIC_EnableIRQ((IRQn_Type)WIFI_COMM_ID);

	/* Enable PIO interrupt lines. */
	pio_enable_interrupt(WIFI_COMM_PIO, WIFI_COMM_PIN_NUM);
  400d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400da2:	4620      	mov	r0, r4
  400da4:	4b06      	ldr	r3, [pc, #24]	; (400dc0 <configure_wifi_comm_pin+0x48>)
  400da6:	4798      	blx	r3

}
  400da8:	b003      	add	sp, #12
  400daa:	bd30      	pop	{r4, r5, pc}
  400dac:	004012c1 	.word	0x004012c1
  400db0:	400e1000 	.word	0x400e1000
  400db4:	00400cb5 	.word	0x00400cb5
  400db8:	004001a1 	.word	0x004001a1
  400dbc:	e000e100 	.word	0xe000e100
  400dc0:	004010ab 	.word	0x004010ab

00400dc4 <configure_spi>:

void configure_spi(void)
{
  400dc4:	b510      	push	{r4, lr}
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400dc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400dca:	200c      	movs	r0, #12
  400dcc:	4c0e      	ldr	r4, [pc, #56]	; (400e08 <configure_spi+0x44>)
  400dce:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400dd0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400dd4:	200d      	movs	r0, #13
  400dd6:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400dd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ddc:	200e      	movs	r0, #14
  400dde:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400de0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400de4:	200b      	movs	r0, #11
  400de6:	47a0      	blx	r4
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400de8:	4b08      	ldr	r3, [pc, #32]	; (400e0c <configure_spi+0x48>)
  400dea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
  400df2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400df6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400dfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  400dfe:	2100      	movs	r1, #0
  400e00:	f883 1315 	strb.w	r1, [r3, #789]	; 0x315
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  400e04:	601a      	str	r2, [r3, #0]
  400e06:	bd10      	pop	{r4, pc}
  400e08:	004010b9 	.word	0x004010b9
  400e0c:	e000e100 	.word	0xe000e100

00400e10 <spi_peripheral_initialize>:
	NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);
}

void spi_peripheral_initialize(void)
{
  400e10:	b510      	push	{r4, lr}
	spi_enable_clock(SPI);
  400e12:	4c13      	ldr	r4, [pc, #76]	; (400e60 <spi_peripheral_initialize+0x50>)
  400e14:	4620      	mov	r0, r4
  400e16:	4b13      	ldr	r3, [pc, #76]	; (400e64 <spi_peripheral_initialize+0x54>)
  400e18:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400e1a:	2302      	movs	r3, #2
  400e1c:	6023      	str	r3, [r4, #0]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400e1e:	2380      	movs	r3, #128	; 0x80
  400e20:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
  400e22:	6863      	ldr	r3, [r4, #4]
  400e24:	f023 0301 	bic.w	r3, r3, #1
  400e28:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400e2a:	6863      	ldr	r3, [r4, #4]
  400e2c:	f043 0310 	orr.w	r3, r3, #16
  400e30:	6063      	str	r3, [r4, #4]
	spi_disable(SPI);
	spi_reset(SPI);
	spi_set_slave_mode(SPI);
	spi_disable_mode_fault_detect(SPI);
	spi_set_peripheral_chip_select_value(SPI, SPI_CHIP_PCS);
  400e32:	210e      	movs	r1, #14
  400e34:	4620      	mov	r0, r4
  400e36:	4b0c      	ldr	r3, [pc, #48]	; (400e68 <spi_peripheral_initialize+0x58>)
  400e38:	4798      	blx	r3
	spi_set_clock_polarity(SPI, SPI_CHIP_SEL, SPI_CLK_POLARITY);
  400e3a:	2200      	movs	r2, #0
  400e3c:	4611      	mov	r1, r2
  400e3e:	4620      	mov	r0, r4
  400e40:	4b0a      	ldr	r3, [pc, #40]	; (400e6c <spi_peripheral_initialize+0x5c>)
  400e42:	4798      	blx	r3
	spi_set_clock_phase(SPI, SPI_CHIP_SEL, SPI_CLK_PHASE);
  400e44:	2200      	movs	r2, #0
  400e46:	4611      	mov	r1, r2
  400e48:	4620      	mov	r0, r4
  400e4a:	4b09      	ldr	r3, [pc, #36]	; (400e70 <spi_peripheral_initialize+0x60>)
  400e4c:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
  400e4e:	2200      	movs	r2, #0
  400e50:	4611      	mov	r1, r2
  400e52:	4620      	mov	r0, r4
  400e54:	4b07      	ldr	r3, [pc, #28]	; (400e74 <spi_peripheral_initialize+0x64>)
  400e56:	4798      	blx	r3
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400e58:	2301      	movs	r3, #1
  400e5a:	6163      	str	r3, [r4, #20]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e5c:	6023      	str	r3, [r4, #0]
  400e5e:	bd10      	pop	{r4, pc}
  400e60:	40008000 	.word	0x40008000
  400e64:	00400239 	.word	0x00400239
  400e68:	00400249 	.word	0x00400249
  400e6c:	004002c1 	.word	0x004002c1
  400e70:	004002df 	.word	0x004002df
  400e74:	004002fd 	.word	0x004002fd

00400e78 <prepare_spi_transfer>:
	spi_enable(SPI);
}

void prepare_spi_transfer(void)
{
	transfer_len = image_length; // CORRECT?
  400e78:	4b04      	ldr	r3, [pc, #16]	; (400e8c <prepare_spi_transfer+0x14>)
  400e7a:	781b      	ldrb	r3, [r3, #0]
  400e7c:	b2db      	uxtb	r3, r3
  400e7e:	4a04      	ldr	r2, [pc, #16]	; (400e90 <prepare_spi_transfer+0x18>)
  400e80:	6013      	str	r3, [r2, #0]
	transfer_index = 0;
  400e82:	2200      	movs	r2, #0
  400e84:	4b03      	ldr	r3, [pc, #12]	; (400e94 <prepare_spi_transfer+0x1c>)
  400e86:	601a      	str	r2, [r3, #0]
  400e88:	4770      	bx	lr
  400e8a:	bf00      	nop
  400e8c:	200004d8 	.word	0x200004d8
  400e90:	200004ec 	.word	0x200004ec
  400e94:	200004e8 	.word	0x200004e8

00400e98 <SPI_Handler>:
	return p_spi->SPI_SR;
  400e98:	4b0f      	ldr	r3, [pc, #60]	; (400ed8 <SPI_Handler+0x40>)
  400e9a:	691b      	ldr	r3, [r3, #16]
{
	uint32_t new_cmd = 0;
	static uint16_t data;
	uint8_t uc_pcs;

	if (spi_read_status(SPI) & SPI_SR_RDRF) {
  400e9c:	f013 0f01 	tst.w	r3, #1
  400ea0:	d100      	bne.n	400ea4 <SPI_Handler+0xc>
  400ea2:	4770      	bx	lr
{
  400ea4:	b510      	push	{r4, lr}
  400ea6:	b082      	sub	sp, #8
		spi_read(SPI, &data, &uc_pcs);
  400ea8:	f10d 0207 	add.w	r2, sp, #7
  400eac:	490b      	ldr	r1, [pc, #44]	; (400edc <SPI_Handler+0x44>)
  400eae:	480a      	ldr	r0, [pc, #40]	; (400ed8 <SPI_Handler+0x40>)
  400eb0:	4b0b      	ldr	r3, [pc, #44]	; (400ee0 <SPI_Handler+0x48>)
  400eb2:	4798      	blx	r3
		
		if (transfer_len--) {
  400eb4:	4a0b      	ldr	r2, [pc, #44]	; (400ee4 <SPI_Handler+0x4c>)
  400eb6:	6813      	ldr	r3, [r2, #0]
  400eb8:	1e59      	subs	r1, r3, #1
  400eba:	6011      	str	r1, [r2, #0]
  400ebc:	b90b      	cbnz	r3, 400ec2 <SPI_Handler+0x2a>
			spi_write(SPI, transfer_index++, 0, 0);
		}
	}
}
  400ebe:	b002      	add	sp, #8
  400ec0:	bd10      	pop	{r4, pc}
			spi_write(SPI, transfer_index++, 0, 0);
  400ec2:	4b09      	ldr	r3, [pc, #36]	; (400ee8 <SPI_Handler+0x50>)
  400ec4:	6819      	ldr	r1, [r3, #0]
  400ec6:	1c4a      	adds	r2, r1, #1
  400ec8:	601a      	str	r2, [r3, #0]
  400eca:	2300      	movs	r3, #0
  400ecc:	461a      	mov	r2, r3
  400ece:	b289      	uxth	r1, r1
  400ed0:	4801      	ldr	r0, [pc, #4]	; (400ed8 <SPI_Handler+0x40>)
  400ed2:	4c06      	ldr	r4, [pc, #24]	; (400eec <SPI_Handler+0x54>)
  400ed4:	47a0      	blx	r4
}
  400ed6:	e7f2      	b.n	400ebe <SPI_Handler+0x26>
  400ed8:	40008000 	.word	0x40008000
  400edc:	200004da 	.word	0x200004da
  400ee0:	0040025f 	.word	0x0040025f
  400ee4:	200004ec 	.word	0x200004ec
  400ee8:	200004e8 	.word	0x200004e8
  400eec:	0040028d 	.word	0x0040028d

00400ef0 <write_wifi_command>:
	pio_enable_interrupt(PROVISION_BUTTON_PIO, PROVISION_BUTTON_MASK);
	
}

void write_wifi_command(char* comm, uint8_t cnt)
{
  400ef0:	b510      	push	{r4, lr}
  400ef2:	460c      	mov	r4, r1
	counts = 0;
  400ef4:	2200      	movs	r2, #0
  400ef6:	4b08      	ldr	r3, [pc, #32]	; (400f18 <write_wifi_command+0x28>)
  400ef8:	701a      	strb	r2, [r3, #0]
	
	usart_write_line(WIFI_USART, comm); // Tells ESP "comm" command
  400efa:	4601      	mov	r1, r0
  400efc:	4807      	ldr	r0, [pc, #28]	; (400f1c <write_wifi_command+0x2c>)
  400efe:	4b08      	ldr	r3, [pc, #32]	; (400f20 <write_wifi_command+0x30>)
  400f00:	4798      	blx	r3

	// Wait for either command completion or timeout
	while (counts < cnt) {
  400f02:	4a05      	ldr	r2, [pc, #20]	; (400f18 <write_wifi_command+0x28>)
		// check if command complete pin is high
		if (wifi_comm_success) {
  400f04:	4907      	ldr	r1, [pc, #28]	; (400f24 <write_wifi_command+0x34>)
	while (counts < cnt) {
  400f06:	7813      	ldrb	r3, [r2, #0]
  400f08:	b2db      	uxtb	r3, r3
  400f0a:	42a3      	cmp	r3, r4
  400f0c:	d202      	bcs.n	400f14 <write_wifi_command+0x24>
		if (wifi_comm_success) {
  400f0e:	780b      	ldrb	r3, [r1, #0]
  400f10:	2b00      	cmp	r3, #0
  400f12:	d0f8      	beq.n	400f06 <write_wifi_command+0x16>
  400f14:	bd10      	pop	{r4, pc}
  400f16:	bf00      	nop
  400f18:	200004f2 	.word	0x200004f2
  400f1c:	40024000 	.word	0x40024000
  400f20:	00400725 	.word	0x00400725
  400f24:	200004f1 	.word	0x200004f1

00400f28 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400f28:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400f2a:	480e      	ldr	r0, [pc, #56]	; (400f64 <sysclk_init+0x3c>)
  400f2c:	4b0e      	ldr	r3, [pc, #56]	; (400f68 <sysclk_init+0x40>)
  400f2e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400f30:	213e      	movs	r1, #62	; 0x3e
  400f32:	2000      	movs	r0, #0
  400f34:	4b0d      	ldr	r3, [pc, #52]	; (400f6c <sysclk_init+0x44>)
  400f36:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400f38:	4c0d      	ldr	r4, [pc, #52]	; (400f70 <sysclk_init+0x48>)
  400f3a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400f3c:	2800      	cmp	r0, #0
  400f3e:	d0fc      	beq.n	400f3a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400f40:	4b0c      	ldr	r3, [pc, #48]	; (400f74 <sysclk_init+0x4c>)
  400f42:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f44:	4a0c      	ldr	r2, [pc, #48]	; (400f78 <sysclk_init+0x50>)
  400f46:	4b0d      	ldr	r3, [pc, #52]	; (400f7c <sysclk_init+0x54>)
  400f48:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400f4a:	4c0d      	ldr	r4, [pc, #52]	; (400f80 <sysclk_init+0x58>)
  400f4c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400f4e:	2800      	cmp	r0, #0
  400f50:	d0fc      	beq.n	400f4c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400f52:	2010      	movs	r0, #16
  400f54:	4b0b      	ldr	r3, [pc, #44]	; (400f84 <sysclk_init+0x5c>)
  400f56:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400f58:	4b0b      	ldr	r3, [pc, #44]	; (400f88 <sysclk_init+0x60>)
  400f5a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400f5c:	4801      	ldr	r0, [pc, #4]	; (400f64 <sysclk_init+0x3c>)
  400f5e:	4b02      	ldr	r3, [pc, #8]	; (400f68 <sysclk_init+0x40>)
  400f60:	4798      	blx	r3
  400f62:	bd10      	pop	{r4, pc}
  400f64:	07270e00 	.word	0x07270e00
  400f68:	00401521 	.word	0x00401521
  400f6c:	0040123d 	.word	0x0040123d
  400f70:	00401291 	.word	0x00401291
  400f74:	004012a1 	.word	0x004012a1
  400f78:	20133f01 	.word	0x20133f01
  400f7c:	400e0400 	.word	0x400e0400
  400f80:	004012b1 	.word	0x004012b1
  400f84:	004011d9 	.word	0x004011d9
  400f88:	00401411 	.word	0x00401411

00400f8c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400f8c:	6301      	str	r1, [r0, #48]	; 0x30
  400f8e:	4770      	bx	lr

00400f90 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400f90:	6341      	str	r1, [r0, #52]	; 0x34
  400f92:	4770      	bx	lr

00400f94 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400f94:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400f96:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400f9a:	d039      	beq.n	401010 <pio_set_peripheral+0x7c>
  400f9c:	d813      	bhi.n	400fc6 <pio_set_peripheral+0x32>
  400f9e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400fa2:	d025      	beq.n	400ff0 <pio_set_peripheral+0x5c>
  400fa4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400fa8:	d10a      	bne.n	400fc0 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400faa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fac:	4313      	orrs	r3, r2
  400fae:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400fb0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400fb2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400fb4:	400b      	ands	r3, r1
  400fb6:	ea23 0302 	bic.w	r3, r3, r2
  400fba:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400fbc:	6042      	str	r2, [r0, #4]
  400fbe:	4770      	bx	lr
	switch (ul_type) {
  400fc0:	2900      	cmp	r1, #0
  400fc2:	d1fb      	bne.n	400fbc <pio_set_peripheral+0x28>
  400fc4:	4770      	bx	lr
  400fc6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400fca:	d020      	beq.n	40100e <pio_set_peripheral+0x7a>
  400fcc:	d809      	bhi.n	400fe2 <pio_set_peripheral+0x4e>
  400fce:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400fd2:	d1f3      	bne.n	400fbc <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400fd4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400fd6:	4313      	orrs	r3, r2
  400fd8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400fda:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400fdc:	4313      	orrs	r3, r2
  400fde:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400fe0:	e7ec      	b.n	400fbc <pio_set_peripheral+0x28>
	switch (ul_type) {
  400fe2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400fe6:	d012      	beq.n	40100e <pio_set_peripheral+0x7a>
  400fe8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fec:	d00f      	beq.n	40100e <pio_set_peripheral+0x7a>
  400fee:	e7e5      	b.n	400fbc <pio_set_peripheral+0x28>
{
  400ff0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ff2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400ff4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400ff6:	43d3      	mvns	r3, r2
  400ff8:	4021      	ands	r1, r4
  400ffa:	461c      	mov	r4, r3
  400ffc:	4019      	ands	r1, r3
  400ffe:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401000:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401002:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401004:	400b      	ands	r3, r1
  401006:	4023      	ands	r3, r4
  401008:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40100a:	6042      	str	r2, [r0, #4]
}
  40100c:	bc10      	pop	{r4}
  40100e:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  401010:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401012:	6f01      	ldr	r1, [r0, #112]	; 0x70
  401014:	400b      	ands	r3, r1
  401016:	ea23 0302 	bic.w	r3, r3, r2
  40101a:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40101c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40101e:	4313      	orrs	r3, r2
  401020:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401022:	e7cb      	b.n	400fbc <pio_set_peripheral+0x28>

00401024 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  401024:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401026:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40102a:	bf14      	ite	ne
  40102c:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40102e:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401030:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  401034:	bf14      	ite	ne
  401036:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  401038:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  40103a:	f012 0f02 	tst.w	r2, #2
  40103e:	d107      	bne.n	401050 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401040:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  401044:	bf18      	it	ne
  401046:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  40104a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40104c:	6001      	str	r1, [r0, #0]
  40104e:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  401050:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  401054:	e7f9      	b.n	40104a <pio_set_input+0x26>

00401056 <pio_set_output>:
{
  401056:	b410      	push	{r4}
  401058:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40105a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40105c:	b944      	cbnz	r4, 401070 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  40105e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401060:	b143      	cbz	r3, 401074 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  401062:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401064:	b942      	cbnz	r2, 401078 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  401066:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401068:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40106a:	6001      	str	r1, [r0, #0]
}
  40106c:	bc10      	pop	{r4}
  40106e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401070:	6641      	str	r1, [r0, #100]	; 0x64
  401072:	e7f5      	b.n	401060 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401074:	6541      	str	r1, [r0, #84]	; 0x54
  401076:	e7f5      	b.n	401064 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401078:	6301      	str	r1, [r0, #48]	; 0x30
  40107a:	e7f5      	b.n	401068 <pio_set_output+0x12>

0040107c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  40107c:	f012 0f10 	tst.w	r2, #16
  401080:	d010      	beq.n	4010a4 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
  401082:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401086:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
  40108a:	bf14      	ite	ne
  40108c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
  401090:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
  401094:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
  401098:	bf14      	ite	ne
  40109a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
  40109e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4010a2:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4010a4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4010a8:	4770      	bx	lr

004010aa <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4010aa:	6401      	str	r1, [r0, #64]	; 0x40
  4010ac:	4770      	bx	lr

004010ae <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4010ae:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4010b0:	4770      	bx	lr

004010b2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4010b2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4010b4:	4770      	bx	lr
	...

004010b8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4010b8:	b570      	push	{r4, r5, r6, lr}
  4010ba:	b082      	sub	sp, #8
  4010bc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4010be:	0943      	lsrs	r3, r0, #5
  4010c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4010c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4010c8:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4010ca:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4010ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4010d2:	d053      	beq.n	40117c <pio_configure_pin+0xc4>
  4010d4:	d80a      	bhi.n	4010ec <pio_configure_pin+0x34>
  4010d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4010da:	d02d      	beq.n	401138 <pio_configure_pin+0x80>
  4010dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4010e0:	d03b      	beq.n	40115a <pio_configure_pin+0xa2>
  4010e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4010e6:	d015      	beq.n	401114 <pio_configure_pin+0x5c>
		return 0;
  4010e8:	2000      	movs	r0, #0
  4010ea:	e023      	b.n	401134 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4010ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4010f0:	d055      	beq.n	40119e <pio_configure_pin+0xe6>
  4010f2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4010f6:	d052      	beq.n	40119e <pio_configure_pin+0xe6>
  4010f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4010fc:	d1f4      	bne.n	4010e8 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4010fe:	f000 011f 	and.w	r1, r0, #31
  401102:	2601      	movs	r6, #1
  401104:	462a      	mov	r2, r5
  401106:	fa06 f101 	lsl.w	r1, r6, r1
  40110a:	4620      	mov	r0, r4
  40110c:	4b2f      	ldr	r3, [pc, #188]	; (4011cc <pio_configure_pin+0x114>)
  40110e:	4798      	blx	r3
	return 1;
  401110:	4630      	mov	r0, r6
		break;
  401112:	e00f      	b.n	401134 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401114:	f000 001f 	and.w	r0, r0, #31
  401118:	2601      	movs	r6, #1
  40111a:	4086      	lsls	r6, r0
  40111c:	4632      	mov	r2, r6
  40111e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401122:	4620      	mov	r0, r4
  401124:	4b2a      	ldr	r3, [pc, #168]	; (4011d0 <pio_configure_pin+0x118>)
  401126:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401128:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40112c:	bf14      	ite	ne
  40112e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401130:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  401132:	2001      	movs	r0, #1
}
  401134:	b002      	add	sp, #8
  401136:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401138:	f000 001f 	and.w	r0, r0, #31
  40113c:	2601      	movs	r6, #1
  40113e:	4086      	lsls	r6, r0
  401140:	4632      	mov	r2, r6
  401142:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401146:	4620      	mov	r0, r4
  401148:	4b21      	ldr	r3, [pc, #132]	; (4011d0 <pio_configure_pin+0x118>)
  40114a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40114c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401150:	bf14      	ite	ne
  401152:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401154:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  401156:	2001      	movs	r0, #1
  401158:	e7ec      	b.n	401134 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40115a:	f000 001f 	and.w	r0, r0, #31
  40115e:	2601      	movs	r6, #1
  401160:	4086      	lsls	r6, r0
  401162:	4632      	mov	r2, r6
  401164:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401168:	4620      	mov	r0, r4
  40116a:	4b19      	ldr	r3, [pc, #100]	; (4011d0 <pio_configure_pin+0x118>)
  40116c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40116e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401172:	bf14      	ite	ne
  401174:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401176:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  401178:	2001      	movs	r0, #1
  40117a:	e7db      	b.n	401134 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40117c:	f000 001f 	and.w	r0, r0, #31
  401180:	2601      	movs	r6, #1
  401182:	4086      	lsls	r6, r0
  401184:	4632      	mov	r2, r6
  401186:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40118a:	4620      	mov	r0, r4
  40118c:	4b10      	ldr	r3, [pc, #64]	; (4011d0 <pio_configure_pin+0x118>)
  40118e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401190:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  401194:	bf14      	ite	ne
  401196:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  401198:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  40119a:	2001      	movs	r0, #1
  40119c:	e7ca      	b.n	401134 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40119e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4011a2:	f000 011f 	and.w	r1, r0, #31
  4011a6:	2601      	movs	r6, #1
  4011a8:	ea05 0306 	and.w	r3, r5, r6
  4011ac:	9300      	str	r3, [sp, #0]
  4011ae:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4011b2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4011b6:	bf14      	ite	ne
  4011b8:	2200      	movne	r2, #0
  4011ba:	2201      	moveq	r2, #1
  4011bc:	fa06 f101 	lsl.w	r1, r6, r1
  4011c0:	4620      	mov	r0, r4
  4011c2:	4c04      	ldr	r4, [pc, #16]	; (4011d4 <pio_configure_pin+0x11c>)
  4011c4:	47a0      	blx	r4
	return 1;
  4011c6:	4630      	mov	r0, r6
		break;
  4011c8:	e7b4      	b.n	401134 <pio_configure_pin+0x7c>
  4011ca:	bf00      	nop
  4011cc:	00401025 	.word	0x00401025
  4011d0:	00400f95 	.word	0x00400f95
  4011d4:	00401057 	.word	0x00401057

004011d8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011d8:	4a17      	ldr	r2, [pc, #92]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  4011da:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4011e0:	4318      	orrs	r0, r3
  4011e2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011e6:	f013 0f08 	tst.w	r3, #8
  4011ea:	d10a      	bne.n	401202 <pmc_switch_mck_to_pllack+0x2a>
  4011ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4011f0:	4911      	ldr	r1, [pc, #68]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  4011f2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011f4:	f012 0f08 	tst.w	r2, #8
  4011f8:	d103      	bne.n	401202 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011fa:	3b01      	subs	r3, #1
  4011fc:	d1f9      	bne.n	4011f2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4011fe:	2001      	movs	r0, #1
  401200:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401202:	4a0d      	ldr	r2, [pc, #52]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  401204:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401206:	f023 0303 	bic.w	r3, r3, #3
  40120a:	f043 0302 	orr.w	r3, r3, #2
  40120e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401210:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401212:	f013 0f08 	tst.w	r3, #8
  401216:	d10a      	bne.n	40122e <pmc_switch_mck_to_pllack+0x56>
  401218:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40121c:	4906      	ldr	r1, [pc, #24]	; (401238 <pmc_switch_mck_to_pllack+0x60>)
  40121e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401220:	f012 0f08 	tst.w	r2, #8
  401224:	d105      	bne.n	401232 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401226:	3b01      	subs	r3, #1
  401228:	d1f9      	bne.n	40121e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40122a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40122c:	4770      	bx	lr
	return 0;
  40122e:	2000      	movs	r0, #0
  401230:	4770      	bx	lr
  401232:	2000      	movs	r0, #0
  401234:	4770      	bx	lr
  401236:	bf00      	nop
  401238:	400e0400 	.word	0x400e0400

0040123c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40123c:	b9c8      	cbnz	r0, 401272 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40123e:	4a11      	ldr	r2, [pc, #68]	; (401284 <pmc_switch_mainck_to_xtal+0x48>)
  401240:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401242:	0209      	lsls	r1, r1, #8
  401244:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401246:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40124a:	f023 0303 	bic.w	r3, r3, #3
  40124e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401252:	f043 0301 	orr.w	r3, r3, #1
  401256:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401258:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40125a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40125c:	f013 0f01 	tst.w	r3, #1
  401260:	d0fb      	beq.n	40125a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401262:	4a08      	ldr	r2, [pc, #32]	; (401284 <pmc_switch_mainck_to_xtal+0x48>)
  401264:	6a13      	ldr	r3, [r2, #32]
  401266:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  40126a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  40126e:	6213      	str	r3, [r2, #32]
  401270:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401272:	4904      	ldr	r1, [pc, #16]	; (401284 <pmc_switch_mainck_to_xtal+0x48>)
  401274:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401276:	4a04      	ldr	r2, [pc, #16]	; (401288 <pmc_switch_mainck_to_xtal+0x4c>)
  401278:	401a      	ands	r2, r3
  40127a:	4b04      	ldr	r3, [pc, #16]	; (40128c <pmc_switch_mainck_to_xtal+0x50>)
  40127c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40127e:	620b      	str	r3, [r1, #32]
  401280:	4770      	bx	lr
  401282:	bf00      	nop
  401284:	400e0400 	.word	0x400e0400
  401288:	fec8fffc 	.word	0xfec8fffc
  40128c:	01370002 	.word	0x01370002

00401290 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401290:	4b02      	ldr	r3, [pc, #8]	; (40129c <pmc_osc_is_ready_mainck+0xc>)
  401292:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401294:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401298:	4770      	bx	lr
  40129a:	bf00      	nop
  40129c:	400e0400 	.word	0x400e0400

004012a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4012a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4012a4:	4b01      	ldr	r3, [pc, #4]	; (4012ac <pmc_disable_pllack+0xc>)
  4012a6:	629a      	str	r2, [r3, #40]	; 0x28
  4012a8:	4770      	bx	lr
  4012aa:	bf00      	nop
  4012ac:	400e0400 	.word	0x400e0400

004012b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4012b0:	4b02      	ldr	r3, [pc, #8]	; (4012bc <pmc_is_locked_pllack+0xc>)
  4012b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012b4:	f000 0002 	and.w	r0, r0, #2
  4012b8:	4770      	bx	lr
  4012ba:	bf00      	nop
  4012bc:	400e0400 	.word	0x400e0400

004012c0 <pmc_enable_periph_clk>:
	PMC->PMC_PCR = ul_id & 0x7F;
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
	PMC->PMC_PCR = pcr;
	return 0;
#else
	if (ul_id > MAX_PERIPH_ID) {
  4012c0:	2822      	cmp	r0, #34	; 0x22
  4012c2:	d81e      	bhi.n	401302 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4012c4:	281f      	cmp	r0, #31
  4012c6:	d80c      	bhi.n	4012e2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4012c8:	4b11      	ldr	r3, [pc, #68]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012ca:	699a      	ldr	r2, [r3, #24]
  4012cc:	2301      	movs	r3, #1
  4012ce:	4083      	lsls	r3, r0
  4012d0:	4393      	bics	r3, r2
  4012d2:	d018      	beq.n	401306 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012d4:	2301      	movs	r3, #1
  4012d6:	fa03 f000 	lsl.w	r0, r3, r0
  4012da:	4b0d      	ldr	r3, [pc, #52]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012dc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012de:	2000      	movs	r0, #0
  4012e0:	4770      	bx	lr
		ul_id -= 32;
  4012e2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012e4:	4b0a      	ldr	r3, [pc, #40]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4012ea:	2301      	movs	r3, #1
  4012ec:	4083      	lsls	r3, r0
  4012ee:	4393      	bics	r3, r2
  4012f0:	d00b      	beq.n	40130a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012f2:	2301      	movs	r3, #1
  4012f4:	fa03 f000 	lsl.w	r0, r3, r0
  4012f8:	4b05      	ldr	r3, [pc, #20]	; (401310 <pmc_enable_periph_clk+0x50>)
  4012fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4012fe:	2000      	movs	r0, #0
  401300:	4770      	bx	lr
		return 1;
  401302:	2001      	movs	r0, #1
  401304:	4770      	bx	lr
	return 0;
  401306:	2000      	movs	r0, #0
  401308:	4770      	bx	lr
  40130a:	2000      	movs	r0, #0
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop
  401310:	400e0400 	.word	0x400e0400

00401314 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  401314:	b510      	push	{r4, lr}
  401316:	200b      	movs	r0, #11
  401318:	4c0f      	ldr	r4, [pc, #60]	; (401358 <board_init+0x44>)
  40131a:	47a0      	blx	r4
  40131c:	200c      	movs	r0, #12
  40131e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401320:	4b0e      	ldr	r3, [pc, #56]	; (40135c <board_init+0x48>)
  401322:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  401326:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401328:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40132c:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40132e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  401332:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401334:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  401338:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40133a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40133e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  401340:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  401342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  401346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  40134c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40134e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
  401354:	675a      	str	r2, [r3, #116]	; 0x74
  401356:	bd10      	pop	{r4, pc}
  401358:	004012c1 	.word	0x004012c1
  40135c:	400e0e00 	.word	0x400e0e00

00401360 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401360:	e7fe      	b.n	401360 <Dummy_Handler>
	...

00401364 <Reset_Handler>:
{
  401364:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  401366:	4b21      	ldr	r3, [pc, #132]	; (4013ec <Reset_Handler+0x88>)
  401368:	4a21      	ldr	r2, [pc, #132]	; (4013f0 <Reset_Handler+0x8c>)
  40136a:	429a      	cmp	r2, r3
  40136c:	d928      	bls.n	4013c0 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  40136e:	4b21      	ldr	r3, [pc, #132]	; (4013f4 <Reset_Handler+0x90>)
  401370:	4a1e      	ldr	r2, [pc, #120]	; (4013ec <Reset_Handler+0x88>)
  401372:	429a      	cmp	r2, r3
  401374:	d20c      	bcs.n	401390 <Reset_Handler+0x2c>
  401376:	3b01      	subs	r3, #1
  401378:	1a9b      	subs	r3, r3, r2
  40137a:	f023 0303 	bic.w	r3, r3, #3
  40137e:	3304      	adds	r3, #4
  401380:	4413      	add	r3, r2
  401382:	491b      	ldr	r1, [pc, #108]	; (4013f0 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  401384:	f851 0b04 	ldr.w	r0, [r1], #4
  401388:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  40138c:	429a      	cmp	r2, r3
  40138e:	d1f9      	bne.n	401384 <Reset_Handler+0x20>
	__NOP();
  401390:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  401392:	4b19      	ldr	r3, [pc, #100]	; (4013f8 <Reset_Handler+0x94>)
  401394:	4a19      	ldr	r2, [pc, #100]	; (4013fc <Reset_Handler+0x98>)
  401396:	429a      	cmp	r2, r3
  401398:	d20a      	bcs.n	4013b0 <Reset_Handler+0x4c>
  40139a:	3b01      	subs	r3, #1
  40139c:	1a9b      	subs	r3, r3, r2
  40139e:	f023 0303 	bic.w	r3, r3, #3
  4013a2:	3304      	adds	r3, #4
  4013a4:	4413      	add	r3, r2
		*pDest++ = 0;
  4013a6:	2100      	movs	r1, #0
  4013a8:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  4013ac:	429a      	cmp	r2, r3
  4013ae:	d1fb      	bne.n	4013a8 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  4013b0:	4b13      	ldr	r3, [pc, #76]	; (401400 <Reset_Handler+0x9c>)
  4013b2:	4a14      	ldr	r2, [pc, #80]	; (401404 <Reset_Handler+0xa0>)
  4013b4:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  4013b6:	4b14      	ldr	r3, [pc, #80]	; (401408 <Reset_Handler+0xa4>)
  4013b8:	4798      	blx	r3
	main();
  4013ba:	4b14      	ldr	r3, [pc, #80]	; (40140c <Reset_Handler+0xa8>)
  4013bc:	4798      	blx	r3
  4013be:	e7fe      	b.n	4013be <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  4013c0:	4b0a      	ldr	r3, [pc, #40]	; (4013ec <Reset_Handler+0x88>)
  4013c2:	4a0b      	ldr	r2, [pc, #44]	; (4013f0 <Reset_Handler+0x8c>)
  4013c4:	429a      	cmp	r2, r3
  4013c6:	d2e3      	bcs.n	401390 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  4013c8:	4b0a      	ldr	r3, [pc, #40]	; (4013f4 <Reset_Handler+0x90>)
  4013ca:	4808      	ldr	r0, [pc, #32]	; (4013ec <Reset_Handler+0x88>)
  4013cc:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  4013ce:	4611      	mov	r1, r2
  4013d0:	3a04      	subs	r2, #4
  4013d2:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  4013d4:	2800      	cmp	r0, #0
  4013d6:	d0db      	beq.n	401390 <Reset_Handler+0x2c>
  4013d8:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  4013dc:	f852 0904 	ldr.w	r0, [r2], #-4
  4013e0:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  4013e4:	42ca      	cmn	r2, r1
  4013e6:	d1f9      	bne.n	4013dc <Reset_Handler+0x78>
  4013e8:	e7d2      	b.n	401390 <Reset_Handler+0x2c>
  4013ea:	bf00      	nop
  4013ec:	20000000 	.word	0x20000000
  4013f0:	00402bc4 	.word	0x00402bc4
  4013f4:	2000043c 	.word	0x2000043c
  4013f8:	20000904 	.word	0x20000904
  4013fc:	2000043c 	.word	0x2000043c
  401400:	e000ed00 	.word	0xe000ed00
  401404:	00400000 	.word	0x00400000
  401408:	0040169d 	.word	0x0040169d
  40140c:	00401595 	.word	0x00401595

00401410 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  401410:	4b3c      	ldr	r3, [pc, #240]	; (401504 <SystemCoreClockUpdate+0xf4>)
  401412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401414:	f003 0303 	and.w	r3, r3, #3
  401418:	2b03      	cmp	r3, #3
  40141a:	d80e      	bhi.n	40143a <SystemCoreClockUpdate+0x2a>
  40141c:	e8df f003 	tbb	[pc, r3]
  401420:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  401424:	4b38      	ldr	r3, [pc, #224]	; (401508 <SystemCoreClockUpdate+0xf8>)
  401426:	695b      	ldr	r3, [r3, #20]
  401428:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  40142c:	bf14      	ite	ne
  40142e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401432:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401436:	4b35      	ldr	r3, [pc, #212]	; (40150c <SystemCoreClockUpdate+0xfc>)
  401438:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40143a:	4b32      	ldr	r3, [pc, #200]	; (401504 <SystemCoreClockUpdate+0xf4>)
  40143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40143e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401442:	2b70      	cmp	r3, #112	; 0x70
  401444:	d055      	beq.n	4014f2 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401446:	4b2f      	ldr	r3, [pc, #188]	; (401504 <SystemCoreClockUpdate+0xf4>)
  401448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  40144a:	4930      	ldr	r1, [pc, #192]	; (40150c <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  40144c:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  401450:	680b      	ldr	r3, [r1, #0]
  401452:	40d3      	lsrs	r3, r2
  401454:	600b      	str	r3, [r1, #0]
  401456:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401458:	4b2a      	ldr	r3, [pc, #168]	; (401504 <SystemCoreClockUpdate+0xf4>)
  40145a:	6a1b      	ldr	r3, [r3, #32]
  40145c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401460:	d003      	beq.n	40146a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  401462:	4a2b      	ldr	r2, [pc, #172]	; (401510 <SystemCoreClockUpdate+0x100>)
  401464:	4b29      	ldr	r3, [pc, #164]	; (40150c <SystemCoreClockUpdate+0xfc>)
  401466:	601a      	str	r2, [r3, #0]
  401468:	e7e7      	b.n	40143a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40146a:	4a2a      	ldr	r2, [pc, #168]	; (401514 <SystemCoreClockUpdate+0x104>)
  40146c:	4b27      	ldr	r3, [pc, #156]	; (40150c <SystemCoreClockUpdate+0xfc>)
  40146e:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  401470:	4b24      	ldr	r3, [pc, #144]	; (401504 <SystemCoreClockUpdate+0xf4>)
  401472:	6a1b      	ldr	r3, [r3, #32]
  401474:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401478:	2b10      	cmp	r3, #16
  40147a:	d005      	beq.n	401488 <SystemCoreClockUpdate+0x78>
  40147c:	2b20      	cmp	r3, #32
  40147e:	d1dc      	bne.n	40143a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  401480:	4a23      	ldr	r2, [pc, #140]	; (401510 <SystemCoreClockUpdate+0x100>)
  401482:	4b22      	ldr	r3, [pc, #136]	; (40150c <SystemCoreClockUpdate+0xfc>)
  401484:	601a      	str	r2, [r3, #0]
			break;
  401486:	e7d8      	b.n	40143a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  401488:	4a23      	ldr	r2, [pc, #140]	; (401518 <SystemCoreClockUpdate+0x108>)
  40148a:	4b20      	ldr	r3, [pc, #128]	; (40150c <SystemCoreClockUpdate+0xfc>)
  40148c:	601a      	str	r2, [r3, #0]
			break;
  40148e:	e7d4      	b.n	40143a <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  401490:	4b1c      	ldr	r3, [pc, #112]	; (401504 <SystemCoreClockUpdate+0xf4>)
  401492:	6a1b      	ldr	r3, [r3, #32]
  401494:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401498:	d018      	beq.n	4014cc <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  40149a:	4a1d      	ldr	r2, [pc, #116]	; (401510 <SystemCoreClockUpdate+0x100>)
  40149c:	4b1b      	ldr	r3, [pc, #108]	; (40150c <SystemCoreClockUpdate+0xfc>)
  40149e:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  4014a0:	4b18      	ldr	r3, [pc, #96]	; (401504 <SystemCoreClockUpdate+0xf4>)
  4014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4014a4:	f003 0303 	and.w	r3, r3, #3
  4014a8:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  4014aa:	4a16      	ldr	r2, [pc, #88]	; (401504 <SystemCoreClockUpdate+0xf4>)
  4014ac:	bf07      	ittee	eq
  4014ae:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  4014b0:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4014b2:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4014b4:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  4014b6:	4815      	ldr	r0, [pc, #84]	; (40150c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  4014b8:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  4014bc:	6803      	ldr	r3, [r0, #0]
  4014be:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  4014c2:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  4014c4:	fbb3 f3f2 	udiv	r3, r3, r2
  4014c8:	6003      	str	r3, [r0, #0]
  4014ca:	e7b6      	b.n	40143a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4014cc:	4a11      	ldr	r2, [pc, #68]	; (401514 <SystemCoreClockUpdate+0x104>)
  4014ce:	4b0f      	ldr	r3, [pc, #60]	; (40150c <SystemCoreClockUpdate+0xfc>)
  4014d0:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4014d2:	4b0c      	ldr	r3, [pc, #48]	; (401504 <SystemCoreClockUpdate+0xf4>)
  4014d4:	6a1b      	ldr	r3, [r3, #32]
  4014d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4014da:	2b10      	cmp	r3, #16
  4014dc:	d005      	beq.n	4014ea <SystemCoreClockUpdate+0xda>
  4014de:	2b20      	cmp	r3, #32
  4014e0:	d1de      	bne.n	4014a0 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4014e2:	4a0b      	ldr	r2, [pc, #44]	; (401510 <SystemCoreClockUpdate+0x100>)
  4014e4:	4b09      	ldr	r3, [pc, #36]	; (40150c <SystemCoreClockUpdate+0xfc>)
  4014e6:	601a      	str	r2, [r3, #0]
					break;
  4014e8:	e7da      	b.n	4014a0 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4014ea:	4a0b      	ldr	r2, [pc, #44]	; (401518 <SystemCoreClockUpdate+0x108>)
  4014ec:	4b07      	ldr	r3, [pc, #28]	; (40150c <SystemCoreClockUpdate+0xfc>)
  4014ee:	601a      	str	r2, [r3, #0]
					break;
  4014f0:	e7d6      	b.n	4014a0 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  4014f2:	4a06      	ldr	r2, [pc, #24]	; (40150c <SystemCoreClockUpdate+0xfc>)
  4014f4:	6813      	ldr	r3, [r2, #0]
  4014f6:	4909      	ldr	r1, [pc, #36]	; (40151c <SystemCoreClockUpdate+0x10c>)
  4014f8:	fba1 1303 	umull	r1, r3, r1, r3
  4014fc:	085b      	lsrs	r3, r3, #1
  4014fe:	6013      	str	r3, [r2, #0]
  401500:	4770      	bx	lr
  401502:	bf00      	nop
  401504:	400e0400 	.word	0x400e0400
  401508:	400e1410 	.word	0x400e1410
  40150c:	2000000c 	.word	0x2000000c
  401510:	00b71b00 	.word	0x00b71b00
  401514:	003d0900 	.word	0x003d0900
  401518:	007a1200 	.word	0x007a1200
  40151c:	aaaaaaab 	.word	0xaaaaaaab

00401520 <system_init_flash>:
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
#if !defined(ID_EFC1)
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  401520:	4b12      	ldr	r3, [pc, #72]	; (40156c <system_init_flash+0x4c>)
  401522:	4298      	cmp	r0, r3
  401524:	d911      	bls.n	40154a <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  401526:	4b12      	ldr	r3, [pc, #72]	; (401570 <system_init_flash+0x50>)
  401528:	4298      	cmp	r0, r3
  40152a:	d913      	bls.n	401554 <system_init_flash+0x34>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  40152c:	4b11      	ldr	r3, [pc, #68]	; (401574 <system_init_flash+0x54>)
  40152e:	4298      	cmp	r0, r3
  401530:	d914      	bls.n	40155c <system_init_flash+0x3c>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  401532:	4b11      	ldr	r3, [pc, #68]	; (401578 <system_init_flash+0x58>)
  401534:	4298      	cmp	r0, r3
  401536:	d915      	bls.n	401564 <system_init_flash+0x44>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  401538:	4b10      	ldr	r3, [pc, #64]	; (40157c <system_init_flash+0x5c>)
  40153a:	4298      	cmp	r0, r3
					EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40153c:	bf94      	ite	ls
  40153e:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
					} else {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401542:	4a0f      	ldrhi	r2, [pc, #60]	; (401580 <system_init_flash+0x60>)
  401544:	4b0f      	ldr	r3, [pc, #60]	; (401584 <system_init_flash+0x64>)
  401546:	601a      	str	r2, [r3, #0]
  401548:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  40154a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40154e:	4b0d      	ldr	r3, [pc, #52]	; (401584 <system_init_flash+0x64>)
  401550:	601a      	str	r2, [r3, #0]
  401552:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401554:	4a0c      	ldr	r2, [pc, #48]	; (401588 <system_init_flash+0x68>)
  401556:	4b0b      	ldr	r3, [pc, #44]	; (401584 <system_init_flash+0x64>)
  401558:	601a      	str	r2, [r3, #0]
  40155a:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40155c:	4a0b      	ldr	r2, [pc, #44]	; (40158c <system_init_flash+0x6c>)
  40155e:	4b09      	ldr	r3, [pc, #36]	; (401584 <system_init_flash+0x64>)
  401560:	601a      	str	r2, [r3, #0]
  401562:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401564:	4a0a      	ldr	r2, [pc, #40]	; (401590 <system_init_flash+0x70>)
  401566:	4b07      	ldr	r3, [pc, #28]	; (401584 <system_init_flash+0x64>)
  401568:	601a      	str	r2, [r3, #0]
  40156a:	4770      	bx	lr
  40156c:	01312cff 	.word	0x01312cff
  401570:	026259ff 	.word	0x026259ff
  401574:	039386ff 	.word	0x039386ff
  401578:	04c4b3ff 	.word	0x04c4b3ff
  40157c:	05f5e0ff 	.word	0x05f5e0ff
  401580:	04000500 	.word	0x04000500
  401584:	400e0a00 	.word	0x400e0a00
  401588:	04000100 	.word	0x04000100
  40158c:	04000200 	.word	0x04000200
  401590:	04000300 	.word	0x04000300

00401594 <main>:
#include "ov2640.h"
#include "camera.h"
#include "timer_interface.h"

int main (void)
{
  401594:	b508      	push	{r3, lr}
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
  401596:	4b25      	ldr	r3, [pc, #148]	; (40162c <main+0x98>)
  401598:	4798      	blx	r3
	wdt_disable(WDT);
  40159a:	4825      	ldr	r0, [pc, #148]	; (401630 <main+0x9c>)
  40159c:	4b25      	ldr	r3, [pc, #148]	; (401634 <main+0xa0>)
  40159e:	4798      	blx	r3
	board_init();
  4015a0:	4b25      	ldr	r3, [pc, #148]	; (401638 <main+0xa4>)
  4015a2:	4798      	blx	r3
	
	// Configuring timer
	configure_tc(); // configure timer
  4015a4:	4b25      	ldr	r3, [pc, #148]	; (40163c <main+0xa8>)
  4015a6:	4798      	blx	r3
	
	// Configuring USART
	configure_usart_wifi();
  4015a8:	4b25      	ldr	r3, [pc, #148]	; (401640 <main+0xac>)
  4015aa:	4798      	blx	r3
	configure_wifi_comm_pin();
  4015ac:	4b25      	ldr	r3, [pc, #148]	; (401644 <main+0xb0>)
  4015ae:	4798      	blx	r3
	
	// Configuring SPI
	configure_spi();
  4015b0:	4b25      	ldr	r3, [pc, #148]	; (401648 <main+0xb4>)
  4015b2:	4798      	blx	r3
	spi_peripheral_initialize();
  4015b4:	4b25      	ldr	r3, [pc, #148]	; (40164c <main+0xb8>)
  4015b6:	4798      	blx	r3
	
	
	//usart_write_line(WIFI_USART, "set spi_baud 100000\r\n"); // baud rate lower than usual to see on analyzer
	
	// INITIALIZE INDICATORS (LEDs)
	write_wifi_command("set wlan_gpio 27", 3); // YELLOW
  4015b8:	2103      	movs	r1, #3
  4015ba:	4825      	ldr	r0, [pc, #148]	; (401650 <main+0xbc>)
  4015bc:	4c25      	ldr	r4, [pc, #148]	; (401654 <main+0xc0>)
  4015be:	47a0      	blx	r4
	
	write_wifi_command("set websocket_gpio 26", 3); // WHAT PIN NUM? // GREEN
  4015c0:	2103      	movs	r1, #3
  4015c2:	4825      	ldr	r0, [pc, #148]	; (401658 <main+0xc4>)
  4015c4:	47a0      	blx	r4
	
	write_wifi_command("set ap_gpio 25", 3); // WHAT PIN NUM? // RED
  4015c6:	2103      	movs	r1, #3
  4015c8:	4824      	ldr	r0, [pc, #144]	; (40165c <main+0xc8>)
  4015ca:	47a0      	blx	r4
	
	// Configure Command Complete
	write_wifi_command("set comm_gpio PIN NUM", 3); // WHAT PIN NUM?
  4015cc:	2103      	movs	r1, #3
  4015ce:	4824      	ldr	r0, [pc, #144]	; (401660 <main+0xcc>)
  4015d0:	47a0      	blx	r4
	
	// Configure network
	write_wifi_command("set net_GPIO PIN NUM", 3);
  4015d2:	2103      	movs	r1, #3
  4015d4:	4823      	ldr	r0, [pc, #140]	; (401664 <main+0xd0>)
  4015d6:	47a0      	blx	r4
	
	// configure clients
	write_wifi_command("set clients_gpio PIN NUM", 3);
  4015d8:	2103      	movs	r1, #3
  4015da:	4823      	ldr	r0, [pc, #140]	; (401668 <main+0xd4>)
  4015dc:	47a0      	blx	r4
	
	// Initialize and configure camera
	init_camera();
  4015de:	4b23      	ldr	r3, [pc, #140]	; (40166c <main+0xd8>)
  4015e0:	4798      	blx	r3
	configure_camera();
  4015e2:	4b23      	ldr	r3, [pc, #140]	; (401670 <main+0xdc>)
  4015e4:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4015e6:	4b23      	ldr	r3, [pc, #140]	; (401674 <main+0xe0>)
  4015e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  4015ec:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4015ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4015f2:	635a      	str	r2, [r3, #52]	; 0x34
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4015f4:	631a      	str	r2, [r3, #48]	; 0x30
	
	
	
	
	// Sending "test" to WiFi and waiting for SUCCESS
	write_wifi_command("test", 3);
  4015f6:	2103      	movs	r1, #3
  4015f8:	481f      	ldr	r0, [pc, #124]	; (401678 <main+0xe4>)
  4015fa:	47a0      	blx	r4
	counts = 0;
  4015fc:	2200      	movs	r2, #0
  4015fe:	4b1f      	ldr	r3, [pc, #124]	; (40167c <main+0xe8>)
  401600:	701a      	strb	r2, [r3, #0]
	while (counts < 10) {
  401602:	4619      	mov	r1, r3
		if (uart_test_success) {
  401604:	4a1e      	ldr	r2, [pc, #120]	; (401680 <main+0xec>)
	while (counts < 10) {
  401606:	e001      	b.n	40160c <main+0x78>
		if (uart_test_success) {
  401608:	7813      	ldrb	r3, [r2, #0]
  40160a:	b91b      	cbnz	r3, 401614 <main+0x80>
	while (counts < 10) {
  40160c:	780b      	ldrb	r3, [r1, #0]
  40160e:	b2db      	uxtb	r3, r3
  401610:	2b09      	cmp	r3, #9
  401612:	d9f9      	bls.n	401608 <main+0x74>
	
	

	/* Insert application code here, after the board has been initialized. */
	while(1){
		prepare_spi_transfer();
  401614:	4e1b      	ldr	r6, [pc, #108]	; (401684 <main+0xf0>)
		// usart_write_line(WIFI_USART, "test\r\n");
		usart_write_line(WIFI_USART, "image_transfer 100\r\n"); // Tells ESP to ask for 100 bytes
  401616:	4d1c      	ldr	r5, [pc, #112]	; (401688 <main+0xf4>)
		delay_ms(1000);
  401618:	4c1c      	ldr	r4, [pc, #112]	; (40168c <main+0xf8>)
		prepare_spi_transfer();
  40161a:	47b0      	blx	r6
		usart_write_line(WIFI_USART, "image_transfer 100\r\n"); // Tells ESP to ask for 100 bytes
  40161c:	4629      	mov	r1, r5
  40161e:	481c      	ldr	r0, [pc, #112]	; (401690 <main+0xfc>)
  401620:	4b1c      	ldr	r3, [pc, #112]	; (401694 <main+0x100>)
  401622:	4798      	blx	r3
		delay_ms(1000);
  401624:	4620      	mov	r0, r4
  401626:	4b1c      	ldr	r3, [pc, #112]	; (401698 <main+0x104>)
  401628:	4798      	blx	r3
  40162a:	e7f6      	b.n	40161a <main+0x86>
  40162c:	00400f29 	.word	0x00400f29
  401630:	400e1450 	.word	0x400e1450
  401634:	0040075d 	.word	0x0040075d
  401638:	00401315 	.word	0x00401315
  40163c:	00400bb9 	.word	0x00400bb9
  401640:	00400ce9 	.word	0x00400ce9
  401644:	00400d79 	.word	0x00400d79
  401648:	00400dc5 	.word	0x00400dc5
  40164c:	00400e11 	.word	0x00400e11
  401650:	00402af4 	.word	0x00402af4
  401654:	00400ef1 	.word	0x00400ef1
  401658:	00402b08 	.word	0x00402b08
  40165c:	00402b20 	.word	0x00402b20
  401660:	00402b30 	.word	0x00402b30
  401664:	00402b48 	.word	0x00402b48
  401668:	00402b60 	.word	0x00402b60
  40166c:	00400879 	.word	0x00400879
  401670:	004008c9 	.word	0x004008c9
  401674:	400e0e00 	.word	0x400e0e00
  401678:	00402b7c 	.word	0x00402b7c
  40167c:	200004f2 	.word	0x200004f2
  401680:	200004f0 	.word	0x200004f0
  401684:	00400e79 	.word	0x00400e79
  401688:	00402b84 	.word	0x00402b84
  40168c:	0082ca25 	.word	0x0082ca25
  401690:	40024000 	.word	0x40024000
  401694:	00400725 	.word	0x00400725
  401698:	20000001 	.word	0x20000001

0040169c <__libc_init_array>:
  40169c:	b570      	push	{r4, r5, r6, lr}
  40169e:	4e0f      	ldr	r6, [pc, #60]	; (4016dc <__libc_init_array+0x40>)
  4016a0:	4d0f      	ldr	r5, [pc, #60]	; (4016e0 <__libc_init_array+0x44>)
  4016a2:	1b76      	subs	r6, r6, r5
  4016a4:	10b6      	asrs	r6, r6, #2
  4016a6:	bf18      	it	ne
  4016a8:	2400      	movne	r4, #0
  4016aa:	d005      	beq.n	4016b8 <__libc_init_array+0x1c>
  4016ac:	3401      	adds	r4, #1
  4016ae:	f855 3b04 	ldr.w	r3, [r5], #4
  4016b2:	4798      	blx	r3
  4016b4:	42a6      	cmp	r6, r4
  4016b6:	d1f9      	bne.n	4016ac <__libc_init_array+0x10>
  4016b8:	4e0a      	ldr	r6, [pc, #40]	; (4016e4 <__libc_init_array+0x48>)
  4016ba:	4d0b      	ldr	r5, [pc, #44]	; (4016e8 <__libc_init_array+0x4c>)
  4016bc:	1b76      	subs	r6, r6, r5
  4016be:	f001 fa6f 	bl	402ba0 <_init>
  4016c2:	10b6      	asrs	r6, r6, #2
  4016c4:	bf18      	it	ne
  4016c6:	2400      	movne	r4, #0
  4016c8:	d006      	beq.n	4016d8 <__libc_init_array+0x3c>
  4016ca:	3401      	adds	r4, #1
  4016cc:	f855 3b04 	ldr.w	r3, [r5], #4
  4016d0:	4798      	blx	r3
  4016d2:	42a6      	cmp	r6, r4
  4016d4:	d1f9      	bne.n	4016ca <__libc_init_array+0x2e>
  4016d6:	bd70      	pop	{r4, r5, r6, pc}
  4016d8:	bd70      	pop	{r4, r5, r6, pc}
  4016da:	bf00      	nop
  4016dc:	00402bac 	.word	0x00402bac
  4016e0:	00402bac 	.word	0x00402bac
  4016e4:	00402bb4 	.word	0x00402bb4
  4016e8:	00402bac 	.word	0x00402bac

004016ec <critical_factorization>:
  4016ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016f0:	f04f 0e01 	mov.w	lr, #1
  4016f4:	4674      	mov	r4, lr
  4016f6:	2500      	movs	r5, #0
  4016f8:	f04f 36ff 	mov.w	r6, #4294967295
  4016fc:	192b      	adds	r3, r5, r4
  4016fe:	428b      	cmp	r3, r1
  401700:	eb00 0706 	add.w	r7, r0, r6
  401704:	d20d      	bcs.n	401722 <critical_factorization+0x36>
  401706:	5d3f      	ldrb	r7, [r7, r4]
  401708:	f810 c003 	ldrb.w	ip, [r0, r3]
  40170c:	45bc      	cmp	ip, r7
  40170e:	d22d      	bcs.n	40176c <critical_factorization+0x80>
  401710:	461d      	mov	r5, r3
  401712:	2401      	movs	r4, #1
  401714:	eba3 0e06 	sub.w	lr, r3, r6
  401718:	192b      	adds	r3, r5, r4
  40171a:	428b      	cmp	r3, r1
  40171c:	eb00 0706 	add.w	r7, r0, r6
  401720:	d3f1      	bcc.n	401706 <critical_factorization+0x1a>
  401722:	f04f 0801 	mov.w	r8, #1
  401726:	f8c2 e000 	str.w	lr, [r2]
  40172a:	4644      	mov	r4, r8
  40172c:	2500      	movs	r5, #0
  40172e:	f04f 37ff 	mov.w	r7, #4294967295
  401732:	192b      	adds	r3, r5, r4
  401734:	4299      	cmp	r1, r3
  401736:	eb00 0e07 	add.w	lr, r0, r7
  40173a:	d90e      	bls.n	40175a <critical_factorization+0x6e>
  40173c:	f81e e004 	ldrb.w	lr, [lr, r4]
  401740:	f810 c003 	ldrb.w	ip, [r0, r3]
  401744:	45f4      	cmp	ip, lr
  401746:	d918      	bls.n	40177a <critical_factorization+0x8e>
  401748:	461d      	mov	r5, r3
  40174a:	2401      	movs	r4, #1
  40174c:	eba3 0807 	sub.w	r8, r3, r7
  401750:	192b      	adds	r3, r5, r4
  401752:	4299      	cmp	r1, r3
  401754:	eb00 0e07 	add.w	lr, r0, r7
  401758:	d8f0      	bhi.n	40173c <critical_factorization+0x50>
  40175a:	3701      	adds	r7, #1
  40175c:	1c70      	adds	r0, r6, #1
  40175e:	4287      	cmp	r7, r0
  401760:	bf24      	itt	cs
  401762:	f8c2 8000 	strcs.w	r8, [r2]
  401766:	4638      	movcs	r0, r7
  401768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40176c:	d00c      	beq.n	401788 <critical_factorization+0x9c>
  40176e:	f04f 0e01 	mov.w	lr, #1
  401772:	462e      	mov	r6, r5
  401774:	4674      	mov	r4, lr
  401776:	4475      	add	r5, lr
  401778:	e7c0      	b.n	4016fc <critical_factorization+0x10>
  40177a:	d00b      	beq.n	401794 <critical_factorization+0xa8>
  40177c:	f04f 0801 	mov.w	r8, #1
  401780:	462f      	mov	r7, r5
  401782:	4644      	mov	r4, r8
  401784:	4445      	add	r5, r8
  401786:	e7d4      	b.n	401732 <critical_factorization+0x46>
  401788:	4574      	cmp	r4, lr
  40178a:	bf12      	itee	ne
  40178c:	3401      	addne	r4, #1
  40178e:	461d      	moveq	r5, r3
  401790:	2401      	moveq	r4, #1
  401792:	e7b3      	b.n	4016fc <critical_factorization+0x10>
  401794:	4544      	cmp	r4, r8
  401796:	bf12      	itee	ne
  401798:	3401      	addne	r4, #1
  40179a:	461d      	moveq	r5, r3
  40179c:	2401      	moveq	r4, #1
  40179e:	e7c8      	b.n	401732 <critical_factorization+0x46>

004017a0 <two_way_long_needle>:
  4017a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4017a4:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
  4017a8:	4616      	mov	r6, r2
  4017aa:	4605      	mov	r5, r0
  4017ac:	468b      	mov	fp, r1
  4017ae:	4610      	mov	r0, r2
  4017b0:	4619      	mov	r1, r3
  4017b2:	aa03      	add	r2, sp, #12
  4017b4:	461c      	mov	r4, r3
  4017b6:	f7ff ff99 	bl	4016ec <critical_factorization>
  4017ba:	ab03      	add	r3, sp, #12
  4017bc:	4681      	mov	r9, r0
  4017be:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
  4017c2:	f843 4f04 	str.w	r4, [r3, #4]!
  4017c6:	4293      	cmp	r3, r2
  4017c8:	d1fb      	bne.n	4017c2 <two_way_long_needle+0x22>
  4017ca:	b14c      	cbz	r4, 4017e0 <two_way_long_needle+0x40>
  4017cc:	1e63      	subs	r3, r4, #1
  4017ce:	1e72      	subs	r2, r6, #1
  4017d0:	a804      	add	r0, sp, #16
  4017d2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  4017d6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4017da:	f113 33ff 	adds.w	r3, r3, #4294967295
  4017de:	d2f8      	bcs.n	4017d2 <two_way_long_needle+0x32>
  4017e0:	9903      	ldr	r1, [sp, #12]
  4017e2:	464a      	mov	r2, r9
  4017e4:	4431      	add	r1, r6
  4017e6:	4630      	mov	r0, r6
  4017e8:	f000 fa62 	bl	401cb0 <memcmp>
  4017ec:	2800      	cmp	r0, #0
  4017ee:	d16f      	bne.n	4018d0 <two_way_long_needle+0x130>
  4017f0:	f109 33ff 	add.w	r3, r9, #4294967295
  4017f4:	9300      	str	r3, [sp, #0]
  4017f6:	18f3      	adds	r3, r6, r3
  4017f8:	4682      	mov	sl, r0
  4017fa:	9301      	str	r3, [sp, #4]
  4017fc:	4623      	mov	r3, r4
  4017fe:	4680      	mov	r8, r0
  401800:	4654      	mov	r4, sl
  401802:	4658      	mov	r0, fp
  401804:	469a      	mov	sl, r3
  401806:	eb08 070a 	add.w	r7, r8, sl
  40180a:	1a3a      	subs	r2, r7, r0
  40180c:	2100      	movs	r1, #0
  40180e:	4428      	add	r0, r5
  401810:	f000 f9fe 	bl	401c10 <memchr>
  401814:	2800      	cmp	r0, #0
  401816:	d156      	bne.n	4018c6 <two_way_long_needle+0x126>
  401818:	2f00      	cmp	r7, #0
  40181a:	d054      	beq.n	4018c6 <two_way_long_needle+0x126>
  40181c:	19eb      	adds	r3, r5, r7
  40181e:	aa04      	add	r2, sp, #16
  401820:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  401824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401828:	b14b      	cbz	r3, 40183e <two_way_long_needle+0x9e>
  40182a:	b124      	cbz	r4, 401836 <two_way_long_needle+0x96>
  40182c:	9a03      	ldr	r2, [sp, #12]
  40182e:	4293      	cmp	r3, r2
  401830:	d201      	bcs.n	401836 <two_way_long_needle+0x96>
  401832:	ebaa 0302 	sub.w	r3, sl, r2
  401836:	4498      	add	r8, r3
  401838:	2400      	movs	r4, #0
  40183a:	4638      	mov	r0, r7
  40183c:	e7e3      	b.n	401806 <two_way_long_needle+0x66>
  40183e:	454c      	cmp	r4, r9
  401840:	4623      	mov	r3, r4
  401842:	f10a 3eff 	add.w	lr, sl, #4294967295
  401846:	bf38      	it	cc
  401848:	464b      	movcc	r3, r9
  40184a:	4573      	cmp	r3, lr
  40184c:	d213      	bcs.n	401876 <two_way_long_needle+0xd6>
  40184e:	eb08 0203 	add.w	r2, r8, r3
  401852:	f816 c003 	ldrb.w	ip, [r6, r3]
  401856:	5ca8      	ldrb	r0, [r5, r2]
  401858:	4584      	cmp	ip, r0
  40185a:	442a      	add	r2, r5
  40185c:	eb06 0103 	add.w	r1, r6, r3
  401860:	d006      	beq.n	401870 <two_way_long_needle+0xd0>
  401862:	e02c      	b.n	4018be <two_way_long_needle+0x11e>
  401864:	f811 cf01 	ldrb.w	ip, [r1, #1]!
  401868:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  40186c:	4584      	cmp	ip, r0
  40186e:	d126      	bne.n	4018be <two_way_long_needle+0x11e>
  401870:	3301      	adds	r3, #1
  401872:	4573      	cmp	r3, lr
  401874:	d3f6      	bcc.n	401864 <two_way_long_needle+0xc4>
  401876:	454c      	cmp	r4, r9
  401878:	9900      	ldr	r1, [sp, #0]
  40187a:	f080 8089 	bcs.w	401990 <two_way_long_needle+0x1f0>
  40187e:	9b00      	ldr	r3, [sp, #0]
  401880:	eb08 0203 	add.w	r2, r8, r3
  401884:	9b01      	ldr	r3, [sp, #4]
  401886:	5ca8      	ldrb	r0, [r5, r2]
  401888:	781b      	ldrb	r3, [r3, #0]
  40188a:	4298      	cmp	r0, r3
  40188c:	442a      	add	r2, r5
  40188e:	d17f      	bne.n	401990 <two_way_long_needle+0x1f0>
  401890:	9801      	ldr	r0, [sp, #4]
  401892:	f104 3bff 	add.w	fp, r4, #4294967295
  401896:	e006      	b.n	4018a6 <two_way_long_needle+0x106>
  401898:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  40189c:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  4018a0:	45f4      	cmp	ip, lr
  4018a2:	d103      	bne.n	4018ac <two_way_long_needle+0x10c>
  4018a4:	4619      	mov	r1, r3
  4018a6:	1e4b      	subs	r3, r1, #1
  4018a8:	459b      	cmp	fp, r3
  4018aa:	d1f5      	bne.n	401898 <two_way_long_needle+0xf8>
  4018ac:	3401      	adds	r4, #1
  4018ae:	428c      	cmp	r4, r1
  4018b0:	d870      	bhi.n	401994 <two_way_long_needle+0x1f4>
  4018b2:	9c03      	ldr	r4, [sp, #12]
  4018b4:	4638      	mov	r0, r7
  4018b6:	44a0      	add	r8, r4
  4018b8:	ebaa 0404 	sub.w	r4, sl, r4
  4018bc:	e7a3      	b.n	401806 <two_way_long_needle+0x66>
  4018be:	f1c9 0201 	rsb	r2, r9, #1
  4018c2:	4490      	add	r8, r2
  4018c4:	e7b7      	b.n	401836 <two_way_long_needle+0x96>
  4018c6:	2000      	movs	r0, #0
  4018c8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  4018cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018d0:	eba4 0309 	sub.w	r3, r4, r9
  4018d4:	454b      	cmp	r3, r9
  4018d6:	bf38      	it	cc
  4018d8:	464b      	movcc	r3, r9
  4018da:	3301      	adds	r3, #1
  4018dc:	f109 38ff 	add.w	r8, r9, #4294967295
  4018e0:	9303      	str	r3, [sp, #12]
  4018e2:	eb06 0308 	add.w	r3, r6, r8
  4018e6:	4658      	mov	r0, fp
  4018e8:	f04f 0a00 	mov.w	sl, #0
  4018ec:	46cb      	mov	fp, r9
  4018ee:	4699      	mov	r9, r3
  4018f0:	eb0a 0704 	add.w	r7, sl, r4
  4018f4:	1a3a      	subs	r2, r7, r0
  4018f6:	2100      	movs	r1, #0
  4018f8:	4428      	add	r0, r5
  4018fa:	f000 f989 	bl	401c10 <memchr>
  4018fe:	2800      	cmp	r0, #0
  401900:	d1e1      	bne.n	4018c6 <two_way_long_needle+0x126>
  401902:	2f00      	cmp	r7, #0
  401904:	d0df      	beq.n	4018c6 <two_way_long_needle+0x126>
  401906:	19eb      	adds	r3, r5, r7
  401908:	aa04      	add	r2, sp, #16
  40190a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
  40190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  401912:	bba3      	cbnz	r3, 40197e <two_way_long_needle+0x1de>
  401914:	1e61      	subs	r1, r4, #1
  401916:	458b      	cmp	fp, r1
  401918:	d215      	bcs.n	401946 <two_way_long_needle+0x1a6>
  40191a:	eb0a 020b 	add.w	r2, sl, fp
  40191e:	f816 300b 	ldrb.w	r3, [r6, fp]
  401922:	f815 e002 	ldrb.w	lr, [r5, r2]
  401926:	459e      	cmp	lr, r3
  401928:	442a      	add	r2, r5
  40192a:	eb06 000b 	add.w	r0, r6, fp
  40192e:	465b      	mov	r3, fp
  401930:	d006      	beq.n	401940 <two_way_long_needle+0x1a0>
  401932:	e027      	b.n	401984 <two_way_long_needle+0x1e4>
  401934:	f810 cf01 	ldrb.w	ip, [r0, #1]!
  401938:	f812 ef01 	ldrb.w	lr, [r2, #1]!
  40193c:	45f4      	cmp	ip, lr
  40193e:	d121      	bne.n	401984 <two_way_long_needle+0x1e4>
  401940:	3301      	adds	r3, #1
  401942:	428b      	cmp	r3, r1
  401944:	d3f6      	bcc.n	401934 <two_way_long_needle+0x194>
  401946:	f1b8 3fff 	cmp.w	r8, #4294967295
  40194a:	d011      	beq.n	401970 <two_way_long_needle+0x1d0>
  40194c:	eb0a 0208 	add.w	r2, sl, r8
  401950:	f899 1000 	ldrb.w	r1, [r9]
  401954:	5cab      	ldrb	r3, [r5, r2]
  401956:	4299      	cmp	r1, r3
  401958:	442a      	add	r2, r5
  40195a:	d10f      	bne.n	40197c <two_way_long_needle+0x1dc>
  40195c:	464b      	mov	r3, r9
  40195e:	e005      	b.n	40196c <two_way_long_needle+0x1cc>
  401960:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401964:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  401968:	4288      	cmp	r0, r1
  40196a:	d107      	bne.n	40197c <two_way_long_needle+0x1dc>
  40196c:	42b3      	cmp	r3, r6
  40196e:	d1f7      	bne.n	401960 <two_way_long_needle+0x1c0>
  401970:	eb05 000a 	add.w	r0, r5, sl
  401974:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
  401978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40197c:	9b03      	ldr	r3, [sp, #12]
  40197e:	449a      	add	sl, r3
  401980:	4638      	mov	r0, r7
  401982:	e7b5      	b.n	4018f0 <two_way_long_needle+0x150>
  401984:	f1cb 0201 	rsb	r2, fp, #1
  401988:	4492      	add	sl, r2
  40198a:	449a      	add	sl, r3
  40198c:	4638      	mov	r0, r7
  40198e:	e7af      	b.n	4018f0 <two_way_long_needle+0x150>
  401990:	4649      	mov	r1, r9
  401992:	e78b      	b.n	4018ac <two_way_long_needle+0x10c>
  401994:	eb05 0008 	add.w	r0, r5, r8
  401998:	e796      	b.n	4018c8 <two_way_long_needle+0x128>
  40199a:	bf00      	nop

0040199c <strstr>:
  40199c:	7802      	ldrb	r2, [r0, #0]
  40199e:	2a00      	cmp	r2, #0
  4019a0:	f000 8101 	beq.w	401ba6 <strstr+0x20a>
  4019a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4019a8:	f891 8000 	ldrb.w	r8, [r1]
  4019ac:	b085      	sub	sp, #20
  4019ae:	4644      	mov	r4, r8
  4019b0:	f1b8 0f00 	cmp.w	r8, #0
  4019b4:	d016      	beq.n	4019e4 <strstr+0x48>
  4019b6:	4686      	mov	lr, r0
  4019b8:	f101 0c01 	add.w	ip, r1, #1
  4019bc:	2701      	movs	r7, #1
  4019be:	e003      	b.n	4019c8 <strstr+0x2c>
  4019c0:	f813 4b01 	ldrb.w	r4, [r3], #1
  4019c4:	b16c      	cbz	r4, 4019e2 <strstr+0x46>
  4019c6:	469c      	mov	ip, r3
  4019c8:	42a2      	cmp	r2, r4
  4019ca:	bf14      	ite	ne
  4019cc:	2700      	movne	r7, #0
  4019ce:	f007 0701 	andeq.w	r7, r7, #1
  4019d2:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
  4019d6:	4663      	mov	r3, ip
  4019d8:	2a00      	cmp	r2, #0
  4019da:	d1f1      	bne.n	4019c0 <strstr+0x24>
  4019dc:	f89c 3000 	ldrb.w	r3, [ip]
  4019e0:	b9fb      	cbnz	r3, 401a22 <strstr+0x86>
  4019e2:	b117      	cbz	r7, 4019ea <strstr+0x4e>
  4019e4:	b005      	add	sp, #20
  4019e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4019ea:	460e      	mov	r6, r1
  4019ec:	4605      	mov	r5, r0
  4019ee:	4641      	mov	r1, r8
  4019f0:	3001      	adds	r0, #1
  4019f2:	ebac 0406 	sub.w	r4, ip, r6
  4019f6:	f000 f98b 	bl	401d10 <strchr>
  4019fa:	4607      	mov	r7, r0
  4019fc:	b188      	cbz	r0, 401a22 <strstr+0x86>
  4019fe:	2c01      	cmp	r4, #1
  401a00:	d0f0      	beq.n	4019e4 <strstr+0x48>
  401a02:	1928      	adds	r0, r5, r4
  401a04:	4287      	cmp	r7, r0
  401a06:	bf94      	ite	ls
  401a08:	1bc1      	subls	r1, r0, r7
  401a0a:	2101      	movhi	r1, #1
  401a0c:	2c1f      	cmp	r4, #31
  401a0e:	468b      	mov	fp, r1
  401a10:	d90b      	bls.n	401a2a <strstr+0x8e>
  401a12:	4623      	mov	r3, r4
  401a14:	4632      	mov	r2, r6
  401a16:	4638      	mov	r0, r7
  401a18:	f7ff fec2 	bl	4017a0 <two_way_long_needle>
  401a1c:	b005      	add	sp, #20
  401a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a22:	2000      	movs	r0, #0
  401a24:	b005      	add	sp, #20
  401a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401a2a:	aa03      	add	r2, sp, #12
  401a2c:	4621      	mov	r1, r4
  401a2e:	4630      	mov	r0, r6
  401a30:	f7ff fe5c 	bl	4016ec <critical_factorization>
  401a34:	9903      	ldr	r1, [sp, #12]
  401a36:	4680      	mov	r8, r0
  401a38:	4602      	mov	r2, r0
  401a3a:	4431      	add	r1, r6
  401a3c:	4630      	mov	r0, r6
  401a3e:	f000 f937 	bl	401cb0 <memcmp>
  401a42:	2800      	cmp	r0, #0
  401a44:	d157      	bne.n	401af6 <strstr+0x15a>
  401a46:	f108 33ff 	add.w	r3, r8, #4294967295
  401a4a:	9300      	str	r3, [sp, #0]
  401a4c:	18f3      	adds	r3, r6, r3
  401a4e:	4681      	mov	r9, r0
  401a50:	4605      	mov	r5, r0
  401a52:	9301      	str	r3, [sp, #4]
  401a54:	4658      	mov	r0, fp
  401a56:	46b2      	mov	sl, r6
  401a58:	1966      	adds	r6, r4, r5
  401a5a:	1a32      	subs	r2, r6, r0
  401a5c:	2100      	movs	r1, #0
  401a5e:	4438      	add	r0, r7
  401a60:	f000 f8d6 	bl	401c10 <memchr>
  401a64:	2800      	cmp	r0, #0
  401a66:	d1dc      	bne.n	401a22 <strstr+0x86>
  401a68:	2e00      	cmp	r6, #0
  401a6a:	d0da      	beq.n	401a22 <strstr+0x86>
  401a6c:	45c8      	cmp	r8, r9
  401a6e:	4643      	mov	r3, r8
  401a70:	bf38      	it	cc
  401a72:	464b      	movcc	r3, r9
  401a74:	429c      	cmp	r4, r3
  401a76:	d912      	bls.n	401a9e <strstr+0x102>
  401a78:	195a      	adds	r2, r3, r5
  401a7a:	f81a 1003 	ldrb.w	r1, [sl, r3]
  401a7e:	5cb8      	ldrb	r0, [r7, r2]
  401a80:	4281      	cmp	r1, r0
  401a82:	443a      	add	r2, r7
  401a84:	eb0a 0e03 	add.w	lr, sl, r3
  401a88:	d006      	beq.n	401a98 <strstr+0xfc>
  401a8a:	e02c      	b.n	401ae6 <strstr+0x14a>
  401a8c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
  401a90:	f812 1f01 	ldrb.w	r1, [r2, #1]!
  401a94:	4288      	cmp	r0, r1
  401a96:	d126      	bne.n	401ae6 <strstr+0x14a>
  401a98:	3301      	adds	r3, #1
  401a9a:	429c      	cmp	r4, r3
  401a9c:	d1f6      	bne.n	401a8c <strstr+0xf0>
  401a9e:	45c8      	cmp	r8, r9
  401aa0:	9900      	ldr	r1, [sp, #0]
  401aa2:	f240 8083 	bls.w	401bac <strstr+0x210>
  401aa6:	9b00      	ldr	r3, [sp, #0]
  401aa8:	18ea      	adds	r2, r5, r3
  401aaa:	9b01      	ldr	r3, [sp, #4]
  401aac:	5cb8      	ldrb	r0, [r7, r2]
  401aae:	781b      	ldrb	r3, [r3, #0]
  401ab0:	4298      	cmp	r0, r3
  401ab2:	443a      	add	r2, r7
  401ab4:	d17a      	bne.n	401bac <strstr+0x210>
  401ab6:	9801      	ldr	r0, [sp, #4]
  401ab8:	f109 3bff 	add.w	fp, r9, #4294967295
  401abc:	e006      	b.n	401acc <strstr+0x130>
  401abe:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
  401ac2:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
  401ac6:	45f4      	cmp	ip, lr
  401ac8:	d103      	bne.n	401ad2 <strstr+0x136>
  401aca:	4619      	mov	r1, r3
  401acc:	1e4b      	subs	r3, r1, #1
  401ace:	455b      	cmp	r3, fp
  401ad0:	d1f5      	bne.n	401abe <strstr+0x122>
  401ad2:	f109 0901 	add.w	r9, r9, #1
  401ad6:	4589      	cmp	r9, r1
  401ad8:	d857      	bhi.n	401b8a <strstr+0x1ee>
  401ada:	9b03      	ldr	r3, [sp, #12]
  401adc:	4630      	mov	r0, r6
  401ade:	441d      	add	r5, r3
  401ae0:	eba4 0903 	sub.w	r9, r4, r3
  401ae4:	e7b8      	b.n	401a58 <strstr+0xbc>
  401ae6:	f1c8 0201 	rsb	r2, r8, #1
  401aea:	4415      	add	r5, r2
  401aec:	441d      	add	r5, r3
  401aee:	f04f 0900 	mov.w	r9, #0
  401af2:	4630      	mov	r0, r6
  401af4:	e7b0      	b.n	401a58 <strstr+0xbc>
  401af6:	eba4 0308 	sub.w	r3, r4, r8
  401afa:	4543      	cmp	r3, r8
  401afc:	bf38      	it	cc
  401afe:	4643      	movcc	r3, r8
  401b00:	3301      	adds	r3, #1
  401b02:	f108 39ff 	add.w	r9, r8, #4294967295
  401b06:	9303      	str	r3, [sp, #12]
  401b08:	eb06 0309 	add.w	r3, r6, r9
  401b0c:	4658      	mov	r0, fp
  401b0e:	2500      	movs	r5, #0
  401b10:	46bb      	mov	fp, r7
  401b12:	469a      	mov	sl, r3
  401b14:	1967      	adds	r7, r4, r5
  401b16:	1a3a      	subs	r2, r7, r0
  401b18:	2100      	movs	r1, #0
  401b1a:	4458      	add	r0, fp
  401b1c:	f000 f878 	bl	401c10 <memchr>
  401b20:	2800      	cmp	r0, #0
  401b22:	f47f af7e 	bne.w	401a22 <strstr+0x86>
  401b26:	2f00      	cmp	r7, #0
  401b28:	f43f af7b 	beq.w	401a22 <strstr+0x86>
  401b2c:	4544      	cmp	r4, r8
  401b2e:	d915      	bls.n	401b5c <strstr+0x1c0>
  401b30:	eb08 0205 	add.w	r2, r8, r5
  401b34:	f816 3008 	ldrb.w	r3, [r6, r8]
  401b38:	f81b 0002 	ldrb.w	r0, [fp, r2]
  401b3c:	4298      	cmp	r0, r3
  401b3e:	445a      	add	r2, fp
  401b40:	eb06 0108 	add.w	r1, r6, r8
  401b44:	4643      	mov	r3, r8
  401b46:	d006      	beq.n	401b56 <strstr+0x1ba>
  401b48:	e023      	b.n	401b92 <strstr+0x1f6>
  401b4a:	f811 ef01 	ldrb.w	lr, [r1, #1]!
  401b4e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  401b52:	4586      	cmp	lr, r0
  401b54:	d11d      	bne.n	401b92 <strstr+0x1f6>
  401b56:	3301      	adds	r3, #1
  401b58:	429c      	cmp	r4, r3
  401b5a:	d1f6      	bne.n	401b4a <strstr+0x1ae>
  401b5c:	f1b9 3fff 	cmp.w	r9, #4294967295
  401b60:	d012      	beq.n	401b88 <strstr+0x1ec>
  401b62:	eb05 0209 	add.w	r2, r5, r9
  401b66:	f89a 3000 	ldrb.w	r3, [sl]
  401b6a:	f81b 1002 	ldrb.w	r1, [fp, r2]
  401b6e:	4299      	cmp	r1, r3
  401b70:	445a      	add	r2, fp
  401b72:	d114      	bne.n	401b9e <strstr+0x202>
  401b74:	4653      	mov	r3, sl
  401b76:	e005      	b.n	401b84 <strstr+0x1e8>
  401b78:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
  401b7c:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
  401b80:	4288      	cmp	r0, r1
  401b82:	d10c      	bne.n	401b9e <strstr+0x202>
  401b84:	42b3      	cmp	r3, r6
  401b86:	d1f7      	bne.n	401b78 <strstr+0x1dc>
  401b88:	465f      	mov	r7, fp
  401b8a:	1978      	adds	r0, r7, r5
  401b8c:	b005      	add	sp, #20
  401b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401b92:	f1c8 0201 	rsb	r2, r8, #1
  401b96:	4415      	add	r5, r2
  401b98:	441d      	add	r5, r3
  401b9a:	4638      	mov	r0, r7
  401b9c:	e7ba      	b.n	401b14 <strstr+0x178>
  401b9e:	9b03      	ldr	r3, [sp, #12]
  401ba0:	4638      	mov	r0, r7
  401ba2:	441d      	add	r5, r3
  401ba4:	e7b6      	b.n	401b14 <strstr+0x178>
  401ba6:	780b      	ldrb	r3, [r1, #0]
  401ba8:	b913      	cbnz	r3, 401bb0 <strstr+0x214>
  401baa:	4770      	bx	lr
  401bac:	4641      	mov	r1, r8
  401bae:	e790      	b.n	401ad2 <strstr+0x136>
  401bb0:	2000      	movs	r0, #0
  401bb2:	4770      	bx	lr

00401bb4 <register_fini>:
  401bb4:	4b02      	ldr	r3, [pc, #8]	; (401bc0 <register_fini+0xc>)
  401bb6:	b113      	cbz	r3, 401bbe <register_fini+0xa>
  401bb8:	4802      	ldr	r0, [pc, #8]	; (401bc4 <register_fini+0x10>)
  401bba:	f000 b805 	b.w	401bc8 <atexit>
  401bbe:	4770      	bx	lr
  401bc0:	00000000 	.word	0x00000000
  401bc4:	00401bd5 	.word	0x00401bd5

00401bc8 <atexit>:
  401bc8:	2300      	movs	r3, #0
  401bca:	4601      	mov	r1, r0
  401bcc:	461a      	mov	r2, r3
  401bce:	4618      	mov	r0, r3
  401bd0:	f000 b912 	b.w	401df8 <__register_exitproc>

00401bd4 <__libc_fini_array>:
  401bd4:	b538      	push	{r3, r4, r5, lr}
  401bd6:	4c0a      	ldr	r4, [pc, #40]	; (401c00 <__libc_fini_array+0x2c>)
  401bd8:	4d0a      	ldr	r5, [pc, #40]	; (401c04 <__libc_fini_array+0x30>)
  401bda:	1b64      	subs	r4, r4, r5
  401bdc:	10a4      	asrs	r4, r4, #2
  401bde:	d00a      	beq.n	401bf6 <__libc_fini_array+0x22>
  401be0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401be4:	3b01      	subs	r3, #1
  401be6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401bea:	3c01      	subs	r4, #1
  401bec:	f855 3904 	ldr.w	r3, [r5], #-4
  401bf0:	4798      	blx	r3
  401bf2:	2c00      	cmp	r4, #0
  401bf4:	d1f9      	bne.n	401bea <__libc_fini_array+0x16>
  401bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401bfa:	f000 bfdb 	b.w	402bb4 <_fini>
  401bfe:	bf00      	nop
  401c00:	00402bc4 	.word	0x00402bc4
  401c04:	00402bc0 	.word	0x00402bc0

00401c08 <__retarget_lock_acquire_recursive>:
  401c08:	4770      	bx	lr
  401c0a:	bf00      	nop

00401c0c <__retarget_lock_release_recursive>:
  401c0c:	4770      	bx	lr
  401c0e:	bf00      	nop

00401c10 <memchr>:
  401c10:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401c14:	2a10      	cmp	r2, #16
  401c16:	db2b      	blt.n	401c70 <memchr+0x60>
  401c18:	f010 0f07 	tst.w	r0, #7
  401c1c:	d008      	beq.n	401c30 <memchr+0x20>
  401c1e:	f810 3b01 	ldrb.w	r3, [r0], #1
  401c22:	3a01      	subs	r2, #1
  401c24:	428b      	cmp	r3, r1
  401c26:	d02d      	beq.n	401c84 <memchr+0x74>
  401c28:	f010 0f07 	tst.w	r0, #7
  401c2c:	b342      	cbz	r2, 401c80 <memchr+0x70>
  401c2e:	d1f6      	bne.n	401c1e <memchr+0xe>
  401c30:	b4f0      	push	{r4, r5, r6, r7}
  401c32:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  401c36:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  401c3a:	f022 0407 	bic.w	r4, r2, #7
  401c3e:	f07f 0700 	mvns.w	r7, #0
  401c42:	2300      	movs	r3, #0
  401c44:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  401c48:	3c08      	subs	r4, #8
  401c4a:	ea85 0501 	eor.w	r5, r5, r1
  401c4e:	ea86 0601 	eor.w	r6, r6, r1
  401c52:	fa85 f547 	uadd8	r5, r5, r7
  401c56:	faa3 f587 	sel	r5, r3, r7
  401c5a:	fa86 f647 	uadd8	r6, r6, r7
  401c5e:	faa5 f687 	sel	r6, r5, r7
  401c62:	b98e      	cbnz	r6, 401c88 <memchr+0x78>
  401c64:	d1ee      	bne.n	401c44 <memchr+0x34>
  401c66:	bcf0      	pop	{r4, r5, r6, r7}
  401c68:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  401c6c:	f002 0207 	and.w	r2, r2, #7
  401c70:	b132      	cbz	r2, 401c80 <memchr+0x70>
  401c72:	f810 3b01 	ldrb.w	r3, [r0], #1
  401c76:	3a01      	subs	r2, #1
  401c78:	ea83 0301 	eor.w	r3, r3, r1
  401c7c:	b113      	cbz	r3, 401c84 <memchr+0x74>
  401c7e:	d1f8      	bne.n	401c72 <memchr+0x62>
  401c80:	2000      	movs	r0, #0
  401c82:	4770      	bx	lr
  401c84:	3801      	subs	r0, #1
  401c86:	4770      	bx	lr
  401c88:	2d00      	cmp	r5, #0
  401c8a:	bf06      	itte	eq
  401c8c:	4635      	moveq	r5, r6
  401c8e:	3803      	subeq	r0, #3
  401c90:	3807      	subne	r0, #7
  401c92:	f015 0f01 	tst.w	r5, #1
  401c96:	d107      	bne.n	401ca8 <memchr+0x98>
  401c98:	3001      	adds	r0, #1
  401c9a:	f415 7f80 	tst.w	r5, #256	; 0x100
  401c9e:	bf02      	ittt	eq
  401ca0:	3001      	addeq	r0, #1
  401ca2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  401ca6:	3001      	addeq	r0, #1
  401ca8:	bcf0      	pop	{r4, r5, r6, r7}
  401caa:	3801      	subs	r0, #1
  401cac:	4770      	bx	lr
  401cae:	bf00      	nop

00401cb0 <memcmp>:
  401cb0:	2a03      	cmp	r2, #3
  401cb2:	b470      	push	{r4, r5, r6}
  401cb4:	d922      	bls.n	401cfc <memcmp+0x4c>
  401cb6:	ea40 0301 	orr.w	r3, r0, r1
  401cba:	079b      	lsls	r3, r3, #30
  401cbc:	d011      	beq.n	401ce2 <memcmp+0x32>
  401cbe:	7803      	ldrb	r3, [r0, #0]
  401cc0:	780c      	ldrb	r4, [r1, #0]
  401cc2:	42a3      	cmp	r3, r4
  401cc4:	d11d      	bne.n	401d02 <memcmp+0x52>
  401cc6:	440a      	add	r2, r1
  401cc8:	3101      	adds	r1, #1
  401cca:	e005      	b.n	401cd8 <memcmp+0x28>
  401ccc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  401cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
  401cd4:	42a3      	cmp	r3, r4
  401cd6:	d114      	bne.n	401d02 <memcmp+0x52>
  401cd8:	4291      	cmp	r1, r2
  401cda:	d1f7      	bne.n	401ccc <memcmp+0x1c>
  401cdc:	2000      	movs	r0, #0
  401cde:	bc70      	pop	{r4, r5, r6}
  401ce0:	4770      	bx	lr
  401ce2:	680d      	ldr	r5, [r1, #0]
  401ce4:	6806      	ldr	r6, [r0, #0]
  401ce6:	42ae      	cmp	r6, r5
  401ce8:	460c      	mov	r4, r1
  401cea:	4603      	mov	r3, r0
  401cec:	f101 0104 	add.w	r1, r1, #4
  401cf0:	f100 0004 	add.w	r0, r0, #4
  401cf4:	d108      	bne.n	401d08 <memcmp+0x58>
  401cf6:	3a04      	subs	r2, #4
  401cf8:	2a03      	cmp	r2, #3
  401cfa:	d8f2      	bhi.n	401ce2 <memcmp+0x32>
  401cfc:	2a00      	cmp	r2, #0
  401cfe:	d1de      	bne.n	401cbe <memcmp+0xe>
  401d00:	e7ec      	b.n	401cdc <memcmp+0x2c>
  401d02:	1b18      	subs	r0, r3, r4
  401d04:	bc70      	pop	{r4, r5, r6}
  401d06:	4770      	bx	lr
  401d08:	4621      	mov	r1, r4
  401d0a:	4618      	mov	r0, r3
  401d0c:	e7d7      	b.n	401cbe <memcmp+0xe>
  401d0e:	bf00      	nop

00401d10 <strchr>:
  401d10:	b2c9      	uxtb	r1, r1
  401d12:	2900      	cmp	r1, #0
  401d14:	d041      	beq.n	401d9a <strchr+0x8a>
  401d16:	0782      	lsls	r2, r0, #30
  401d18:	b4f0      	push	{r4, r5, r6, r7}
  401d1a:	d067      	beq.n	401dec <strchr+0xdc>
  401d1c:	7803      	ldrb	r3, [r0, #0]
  401d1e:	2b00      	cmp	r3, #0
  401d20:	d068      	beq.n	401df4 <strchr+0xe4>
  401d22:	4299      	cmp	r1, r3
  401d24:	d037      	beq.n	401d96 <strchr+0x86>
  401d26:	1c43      	adds	r3, r0, #1
  401d28:	e004      	b.n	401d34 <strchr+0x24>
  401d2a:	f813 0b01 	ldrb.w	r0, [r3], #1
  401d2e:	b390      	cbz	r0, 401d96 <strchr+0x86>
  401d30:	4281      	cmp	r1, r0
  401d32:	d02f      	beq.n	401d94 <strchr+0x84>
  401d34:	079a      	lsls	r2, r3, #30
  401d36:	461c      	mov	r4, r3
  401d38:	d1f7      	bne.n	401d2a <strchr+0x1a>
  401d3a:	6825      	ldr	r5, [r4, #0]
  401d3c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
  401d40:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
  401d44:	ea83 0605 	eor.w	r6, r3, r5
  401d48:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
  401d4c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
  401d50:	ea20 0006 	bic.w	r0, r0, r6
  401d54:	ea22 0205 	bic.w	r2, r2, r5
  401d58:	4302      	orrs	r2, r0
  401d5a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401d5e:	d111      	bne.n	401d84 <strchr+0x74>
  401d60:	4620      	mov	r0, r4
  401d62:	f850 6f04 	ldr.w	r6, [r0, #4]!
  401d66:	ea83 0706 	eor.w	r7, r3, r6
  401d6a:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
  401d6e:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
  401d72:	ea25 0507 	bic.w	r5, r5, r7
  401d76:	ea22 0206 	bic.w	r2, r2, r6
  401d7a:	432a      	orrs	r2, r5
  401d7c:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401d80:	d0ef      	beq.n	401d62 <strchr+0x52>
  401d82:	4604      	mov	r4, r0
  401d84:	7820      	ldrb	r0, [r4, #0]
  401d86:	b918      	cbnz	r0, 401d90 <strchr+0x80>
  401d88:	e005      	b.n	401d96 <strchr+0x86>
  401d8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
  401d8e:	b110      	cbz	r0, 401d96 <strchr+0x86>
  401d90:	4281      	cmp	r1, r0
  401d92:	d1fa      	bne.n	401d8a <strchr+0x7a>
  401d94:	4620      	mov	r0, r4
  401d96:	bcf0      	pop	{r4, r5, r6, r7}
  401d98:	4770      	bx	lr
  401d9a:	0783      	lsls	r3, r0, #30
  401d9c:	d024      	beq.n	401de8 <strchr+0xd8>
  401d9e:	7803      	ldrb	r3, [r0, #0]
  401da0:	2b00      	cmp	r3, #0
  401da2:	d0f9      	beq.n	401d98 <strchr+0x88>
  401da4:	1c43      	adds	r3, r0, #1
  401da6:	e003      	b.n	401db0 <strchr+0xa0>
  401da8:	7802      	ldrb	r2, [r0, #0]
  401daa:	3301      	adds	r3, #1
  401dac:	2a00      	cmp	r2, #0
  401dae:	d0f3      	beq.n	401d98 <strchr+0x88>
  401db0:	0799      	lsls	r1, r3, #30
  401db2:	4618      	mov	r0, r3
  401db4:	d1f8      	bne.n	401da8 <strchr+0x98>
  401db6:	6819      	ldr	r1, [r3, #0]
  401db8:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  401dbc:	ea22 0201 	bic.w	r2, r2, r1
  401dc0:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401dc4:	d108      	bne.n	401dd8 <strchr+0xc8>
  401dc6:	f853 1f04 	ldr.w	r1, [r3, #4]!
  401dca:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
  401dce:	ea22 0201 	bic.w	r2, r2, r1
  401dd2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  401dd6:	d0f6      	beq.n	401dc6 <strchr+0xb6>
  401dd8:	781a      	ldrb	r2, [r3, #0]
  401dda:	4618      	mov	r0, r3
  401ddc:	b142      	cbz	r2, 401df0 <strchr+0xe0>
  401dde:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  401de2:	2b00      	cmp	r3, #0
  401de4:	d1fb      	bne.n	401dde <strchr+0xce>
  401de6:	4770      	bx	lr
  401de8:	4603      	mov	r3, r0
  401dea:	e7e4      	b.n	401db6 <strchr+0xa6>
  401dec:	4604      	mov	r4, r0
  401dee:	e7a4      	b.n	401d3a <strchr+0x2a>
  401df0:	4618      	mov	r0, r3
  401df2:	4770      	bx	lr
  401df4:	4618      	mov	r0, r3
  401df6:	e7ce      	b.n	401d96 <strchr+0x86>

00401df8 <__register_exitproc>:
  401df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401dfc:	4d2c      	ldr	r5, [pc, #176]	; (401eb0 <__register_exitproc+0xb8>)
  401dfe:	4606      	mov	r6, r0
  401e00:	6828      	ldr	r0, [r5, #0]
  401e02:	4698      	mov	r8, r3
  401e04:	460f      	mov	r7, r1
  401e06:	4691      	mov	r9, r2
  401e08:	f7ff fefe 	bl	401c08 <__retarget_lock_acquire_recursive>
  401e0c:	4b29      	ldr	r3, [pc, #164]	; (401eb4 <__register_exitproc+0xbc>)
  401e0e:	681c      	ldr	r4, [r3, #0]
  401e10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401e14:	2b00      	cmp	r3, #0
  401e16:	d03e      	beq.n	401e96 <__register_exitproc+0x9e>
  401e18:	685a      	ldr	r2, [r3, #4]
  401e1a:	2a1f      	cmp	r2, #31
  401e1c:	dc1c      	bgt.n	401e58 <__register_exitproc+0x60>
  401e1e:	f102 0e01 	add.w	lr, r2, #1
  401e22:	b176      	cbz	r6, 401e42 <__register_exitproc+0x4a>
  401e24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401e28:	2401      	movs	r4, #1
  401e2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401e2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401e32:	4094      	lsls	r4, r2
  401e34:	4320      	orrs	r0, r4
  401e36:	2e02      	cmp	r6, #2
  401e38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401e3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401e40:	d023      	beq.n	401e8a <__register_exitproc+0x92>
  401e42:	3202      	adds	r2, #2
  401e44:	f8c3 e004 	str.w	lr, [r3, #4]
  401e48:	6828      	ldr	r0, [r5, #0]
  401e4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401e4e:	f7ff fedd 	bl	401c0c <__retarget_lock_release_recursive>
  401e52:	2000      	movs	r0, #0
  401e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e58:	4b17      	ldr	r3, [pc, #92]	; (401eb8 <__register_exitproc+0xc0>)
  401e5a:	b30b      	cbz	r3, 401ea0 <__register_exitproc+0xa8>
  401e5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401e60:	f3af 8000 	nop.w
  401e64:	4603      	mov	r3, r0
  401e66:	b1d8      	cbz	r0, 401ea0 <__register_exitproc+0xa8>
  401e68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401e6c:	6002      	str	r2, [r0, #0]
  401e6e:	2100      	movs	r1, #0
  401e70:	6041      	str	r1, [r0, #4]
  401e72:	460a      	mov	r2, r1
  401e74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401e78:	f04f 0e01 	mov.w	lr, #1
  401e7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401e80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401e84:	2e00      	cmp	r6, #0
  401e86:	d0dc      	beq.n	401e42 <__register_exitproc+0x4a>
  401e88:	e7cc      	b.n	401e24 <__register_exitproc+0x2c>
  401e8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401e8e:	430c      	orrs	r4, r1
  401e90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401e94:	e7d5      	b.n	401e42 <__register_exitproc+0x4a>
  401e96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401e9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401e9e:	e7bb      	b.n	401e18 <__register_exitproc+0x20>
  401ea0:	6828      	ldr	r0, [r5, #0]
  401ea2:	f7ff feb3 	bl	401c0c <__retarget_lock_release_recursive>
  401ea6:	f04f 30ff 	mov.w	r0, #4294967295
  401eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401eae:	bf00      	nop
  401eb0:	20000438 	.word	0x20000438
  401eb4:	00402b9c 	.word	0x00402b9c
  401eb8:	00000000 	.word	0x00000000

00401ebc <OV2640_JPEG>:
  401ebc:	77e114e0 03d71fe5 00e010da 080401ff     ...w............
  401ecc:	0000ffff                                ....

00401ed0 <OV2640_JPEG_1024x768>:
  401ed0:	011101ff 11170012 36327518 971a0119     .........u26....
  401ee0:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  401ef0:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  401f00:	96c1c8c0 3d86008c 90510050 00532c52     .......=P.Q.R,S.
  401f10:	88550054 c05b005a 02d3015c 0000ffff     T.U.Z.[.\.......

00401f20 <OV2640_JPEG_1280x1024>:
  401f20:	011101ff 11170012 36327518 971a0119     .........u26....
  401f30:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  401f40:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  401f50:	c8c004e0 3d8696c1 90510050 00532c52     .......=P.Q.R,S.
  401f60:	88550054 405a0057 015cf05b 00e002d3     T.U.W.Z@[.\.....
  401f70:	0000ffff                                ....

00401f74 <OV2640_JPEG_1600x1200>:
  401f74:	011101ff 11170012 36327518 971a0119     .........u26....
  401f84:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  401f94:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  401fa4:	c8c004e0 3d8696c1 90510050 00532c52     .......=P.Q.R,S.
  401fb4:	88550054 905a0057 055c2c5b 00e002d3     T.U.W.Z.[,\.....
  401fc4:	0000ffff                                ....

00401fc8 <OV2640_JPEG_320x240>:
  401fc8:	401201ff 43181117 4b1a0019 ca4f0932     ...@...C...K2.O.
  401fd8:	235aa850 1239006d 1a22da35 0023c337     P.Z#m.9.5.".7.#.
  401fe8:	1a36c034 c0078806 410e870d 00ff004c     4.6........AL...
  401ff8:	64c004e0 35864bc1 c8518950 00539652     ...d.K.5P.Q.R.S.
  402008:	00550054 505a0057 005c3c5b ffff00e0     T.U.W.ZP[<\.....

00402018 <OV2640_JPEG_640x480>:
  402018:	011101ff 11170012 36327518 971a0119     .........u26....
  402028:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  402038:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  402048:	c8c004e0 3d8696c1 90518950 00532c52     .......=P.Q.R,S.
  402058:	88550054 a05a0057 005c785b 00e004d3     T.U.W.Z.[x\.....
  402068:	0000ffff                                ....

0040206c <OV2640_JPEG_800x600>:
  40206c:	011101ff 11170012 36327518 971a0119     .........u26....
  40207c:	40370f03 9c50bb4f 806d575a 0239343d     ..7@O.P.ZWm.=49.
  40208c:	0a228835 a0344037 b70d0206 00ff010e     5.".7@4.........
  40209c:	c8c004e0 358696c1 90518950 00532c52     .......5P.Q.R,S.
  4020ac:	88550054 c85a0057 005c965b 00e002d3     T.U.W.Z.[.\.....
  4020bc:	0000ffff                                ....

004020c0 <OV2640_JPEG_INIT>:
  4020c0:	ff2c00ff 01ffdf2e 0111323c 28040209     ..,.....<2.....(
  4020d0:	4814e513 78330c2c fb3b333a 1143003e     ...H,.3x:3;.>.C.
  4020e0:	92391016 1a22da35 0023c337 1a36c034     ..9.5.".7.#.4.6.
  4020f0:	c0078806 410e870d 0048004c 0342005b     .......AL.H.[.B.
  402100:	9921814a 38254024 005c8226 70610063     J.!.$@%8&.\.c.ap
  402110:	057c8062 30288020 806d006c 0270006e     b.|. .(0l.m.n.p.
  402120:	c1739471 11174012 00194318 09324b1a     q.s..@...C...K2.
  402130:	604fc037 006da850 3f46383d 3c0c604f     7.O`P.m.=8F?O`.<
  402140:	7fe500ff 2441c0f9 ff7614e0 2042a033     ......A$..v.3.B 
  402150:	004c1843 3f88d587 10d903d7 08c882d3     C.L....?........
  402160:	007c80c9 037c007d 487d487d 207d087c     ..|.}.|.}H}H|.} 
  402170:	0e7d107d 0e910090 31911a91 69915a91     }.}........1.Z.i
  402180:	7e917591 8f918891 a3919691 c491af91     .u.~............
  402190:	e891d791 00922091 e3930693 05930593     ..... ..........
  4021a0:	04930093 00930093 00930093 00930093     ................
  4021b0:	00960093 19970897 0c970297 30972497     .............$.0
  4021c0:	26972897 98970297 00978097 edc30097     .(.&............
  4021d0:	00a800a4 51c611c5 10c780bf a5b866b6     .......Q.....f..
  4021e0:	7cb964b7 97b4afb3 c5b0ffb5 0fb294b1     .d.|............
  4021f0:	64c05cc4 008c4bc1 00503d86 9652c851     .\.d.K...=P.Q.R.
  402200:	00540053 c85a0055 005c965b edc300d3     S.T.U.Z.[.\.....
  402210:	00da007f 67e11fe5 7fdd00e0 40120005     .......g.......@
  402220:	16c004d3 008c12c1 00503d86 24522c51     .........=P.Q,R$
  402230:	00540053 2c5a0055 005c245b 0000ffff     S.T.U.Z,[$\.....

00402240 <OV2640_QQVGA_RGB888>:
  402240:	8012000e 01110013 10d50012 340d120c     ...............4
  402250:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  402260:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  402270:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  402280:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  402290:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  4022a0:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  4022b0:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  4022c0:	11380183 00857084 01870386 30890588     ..8..p.........0
  4022d0:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  4022e0:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  4022f0:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  402300:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  402310:	6eac605d 00bfffbe 3c322831 01123f82     ]`.n....1(2<.?..
  402320:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  402330:	ffff0228                                (...

00402334 <OV2640_QQVGA_YUV422>:
  402334:	8012000e 01110013 10d50012 340d540c     .............T.4
  402344:	25170116 0319a018 891bf01a 18290322     ...%........".).
  402354:	012cf82b f032a031 b43ac433 60043f36     +.,.1.2.3.:.6?.`
  402364:	0f3d8027 403f803e 6a417f40 e5442942     '.=.>.?@@.AjB)D.
  402374:	02474145 a14a6449 1a4c704b 134e504d     EAG.IdJ.KpL.MPN.
  402384:	88670064 38141a68 30253c24 97507226     d.g.h..8$<%0&rP.
  402394:	00527e51 00200053 14382321 555600e9     Q~R.S. .!#8...VU
  4023a4:	ff58ff57 045fff59 ff1300ec 3f817f80     W.X.Y._........?
  4023b4:	01833282 70841138 03860085 05880187     .2..8..p........
  4023c4:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4023d4:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4023e4:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4023f4:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402404:	605d885c ffbe6eac 283100bf 00343c32     \.]`.n....1(2<4.
  402414:	00123f82 00533f36 891b0033 02280322     .?..6?S.3...".(.
  402424:	ffff00d9                                ....

00402428 <OV2640_QVGA_RGB888>:
  402428:	8012000e 01110013 10d50012 340d120c     ...............4
  402438:	a0182517 f01a0319 0322891b f82b1829     .%........".).+.
  402448:	a031012c c433f032 3f36b43a 80276004     ,.1.2.3.:.6?.`'.
  402458:	803e0f3d 7f40403f 29426a41 4145e544     =.>.?@@.AjB)D.EA
  402468:	64490247 704ba14a 504d1a4c 0064134e     G.IdJ.KpL.MPN.d.
  402478:	1a688867 3c243814 72263025 7e519750     g.h..8$<%0&rP.Q~
  402488:	00530052 23210020 00e91438 ff575556     R.S. .!#8...VUW.
  402498:	ff59ff58 00ec045f 7f80ff13 32823f81     X.Y._........?.2
  4024a8:	11380183 00857084 01870386 30890588     ..8..p.........0
  4024b8:	858f308d 85953093 859b3099 129d089c     .0...0...0......
  4024c8:	459f239e 64a155a0 7fa372a2 95a58ba4     .#.E.U.d.r......
  4024d8:	b5a7a7a6 dda9cba8 1aabecaa 6ecf78ce     .............x.n
  4024e8:	0cd10ad0 90d384d2 245a1ed4 885c1f5b     ..........Z$[.\.
  4024f8:	6eac605d 00bfffbe 78325031 01123f82     ]`.n....1P2x.?..
  402508:	04832f36 f4330053 03228a1b 00840084     6/..S.3...".....
  402518:	ffff0228                                (...

0040251c <OV2640_QVGA_YUV422_10FPS>:
  40251c:	8012000e 001305fe 00120511 d40c10d5     ................
  40252c:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40253c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40254c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40255c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40256c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40257c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40258c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40259c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  4025ac:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4025bc:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4025cc:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4025dc:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4025ec:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4025fc:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

0040260c <OV2640_QVGA_YUV422_15FPS>:
  40260c:	8012000e 001305fe 00120311 d40c10d5     ................
  40261c:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40262c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40263c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40264c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40265c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40266c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40267c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40268c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40269c:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  4026ac:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4026bc:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4026cc:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4026dc:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4026ec:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004026fc <OV2640_QVGA_YUV422_20FPS>:
  4026fc:	8012000e 001305fe 00120211 d40c10d5     ................
  40270c:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40271c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40272c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40273c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40274c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40275c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40276c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40277c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40278c:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40279c:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  4027ac:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4027bc:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4027cc:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4027dc:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004027ec <OV2640_QVGA_YUV422_30FPS>:
  4027ec:	8012000e 001305fe 00120111 d40c10d5     ................
  4027fc:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  40280c:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40281c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40282c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40283c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40284c:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  40285c:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  40286c:	32823f81 11380183 03860085 05880187     .?.2..8.........
  40287c:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  40288c:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  40289c:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  4028ac:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  4028bc:	605d885c ffbe6eac 503100bf 3f827832     \.]`.n....1P2x.?
  4028cc:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

004028dc <OV2640_TEST_PATTERN>:
  4028dc:	8012000e 001305fe 00120211 d40c10d5     ................
  4028ec:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4028fc:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  40290c:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  40291c:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  40292c:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  40293c:	7e519750 00530052 23210020 02840738     P.Q~R.S. .!#8...
  40294c:	00e91438 ff575556 ff59ff58 00ec045f     8...VUW.X.Y._...
  40295c:	7f80ff13 32823f81 11380183 03860085     .....?.2..8.....
  40296c:	05880187 308d3089 3093858f 30998595     .....0.0...0...0
  40297c:	089c859b 239e129d 55a0459f 72a264a1     .......#.E.U.d.r
  40298c:	8ba47fa3 a7a695a5 cba8b5a7 ecaadda9     ................
  40299c:	78ce1aab 0ad06ecf 84d20cd1 1ed490d3     ...x.n..........
  4029ac:	1f5b245a 605d885c ffbe6eac 503100bf     Z$[.\.]`.n....1P
  4029bc:	3f827832 3f360012 c4330053 0322891b     2x.?..6?S.3...".
  4029cc:	ffff0228                                (...

004029d0 <OV2640_VGA_YUV422_20FPS>:
  4029d0:	8012000e 001305fe 00120211 d40c10d5     ................
  4029e0:	0116340d a0182517 f01a0319 0322891b     .4...%........".
  4029f0:	f82b1829 a031012c c433f032 3f36b43a     ).+.,.1.2.3.:.6?
  402a00:	80276004 803e0f3d 7f40403f 29426a41     .`'.=.>.?@@.AjB)
  402a10:	4145e544 64490247 704ba14a 504d1a4c     D.EAG.IdJ.KpL.MP
  402a20:	0064134e 1a688867 3c243814 72263025     N.d.g.h..8$<%0&r
  402a30:	7e519750 00530052 23210020 00e91438     P.Q~R.S. .!#8...
  402a40:	ff575556 ff59ff58 00ec045f 7f80ff13     VUW.X.Y._.......
  402a50:	32823f81 11380183 03860085 05880187     .?.2..8.........
  402a60:	308d3089 3093858f 30998595 089c859b     .0.0...0...0....
  402a70:	239e129d 55a0459f 72a264a1 8ba47fa3     ...#.E.U.d.r....
  402a80:	a7a695a5 cba8b5a7 ecaadda9 78ce1aab     ...............x
  402a90:	0ad06ecf 84d20cd1 1ed490d3 1f5b245a     .n..........Z$[.
  402aa0:	605d885c ffbe6eac a03100bf 3f82f032     \.]`.n....1.2..?
  402ab0:	3f360012 c4330053 0322891b ffff0228     ..6?S.3...".(...

00402ac0 <OV2640_YUV422>:
  402ac0:	000500ff 03d710da 803300df 77e1403c     ..........3.<@.w
  402ad0:	ffff0000 0001c200 000000c0 00000800     ................
	...
  402aec:	43435553 00535345 20746573 6e616c77     SUCCESS.set wlan
  402afc:	6970675f 3732206f 00000000 20746573     _gpio 27....set 
  402b0c:	73626577 656b636f 70675f74 32206f69     websocket_gpio 2
  402b1c:	00000036 20746573 675f7061 206f6970     6...set ap_gpio 
  402b2c:	00003532 20746573 6d6d6f63 6970675f     25..set comm_gpi
  402b3c:	4950206f 554e204e 0000004d 20746573     o PIN NUM...set 
  402b4c:	5f74656e 4f495047 4e495020 4d554e20     net_GPIO PIN NUM
  402b5c:	00000000 20746573 65696c63 5f73746e     ....set clients_
  402b6c:	6f697067 4e495020 4d554e20 00000000     gpio PIN NUM....
  402b7c:	74736574 00000000 67616d69 72745f65     test....image_tr
  402b8c:	66736e61 31207265 0a0d3030 00000000     ansfer 100......

00402b9c <_global_impure_ptr>:
  402b9c:	20000010                                ... 

00402ba0 <_init>:
  402ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ba2:	bf00      	nop
  402ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402ba6:	bc08      	pop	{r3}
  402ba8:	469e      	mov	lr, r3
  402baa:	4770      	bx	lr

00402bac <__init_array_start>:
  402bac:	00401bb5 	.word	0x00401bb5

00402bb0 <__frame_dummy_init_array_entry>:
  402bb0:	004000f1                                ..@.

00402bb4 <_fini>:
  402bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bb6:	bf00      	nop
  402bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402bba:	bc08      	pop	{r3}
  402bbc:	469e      	mov	lr, r3
  402bbe:	4770      	bx	lr

00402bc0 <__fini_array_start>:
  402bc0:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
	...

2000000c <SystemCoreClock>:
2000000c:	0900 003d                                   ..=.

20000010 <impure_data>:
20000010:	0000 0000 02fc 2000 0364 2000 03cc 2000     ....... d.. ... 
	...
200000b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20000438 <__atexit_recursive_mutex>:
20000438:	08e0 2000                                   ... 
